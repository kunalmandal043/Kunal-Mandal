function initCustomGrid() {
 
  // DOM Elements
  
  const gridItems = document.querySelectorAll(".grid-item");
  const popup = document.getElementById("product-popup");
  const popupClose = document.getElementById("popup-close");
  const popupImage = document.getElementById("popup-image");
  const popupTitle = document.getElementById("popup-title");
  const popupPrice = document.getElementById("popup-price");
  const popupDescription = document.getElementById("popup-description");
  const sizeSelect = document.getElementById("size-select");
  const addToCartBtn = document.getElementById("add-to-cart");
  const colorContainer = document.getElementById("color-option-container");
  const sizeContainer = document.getElementById("size-option-container");
  const colorSwatches = document.getElementById("color-swatches");
  const hiddenColorSelect = document.getElementById("color-select");
  const sizeWrapper = document.querySelector('.size-select-wrapper');
  const sizeArrow = sizeWrapper.querySelector('.size-arrow');

  const placeholderSrc = popup?.dataset.placeholder || "";
  const lowerArrow = popup.dataset.arrowLower;
  const upperArrow = popup.dataset.arrowUpper;

  let currentProduct = null;
  let selectedColor = null;

 
  // Utility Functions
  
  const formatMoney = cents =>
    (cents / 100).toLocaleString("en-US", { style: "currency", currency: "USD" });

  const getVariantOptions = variant =>
    variant?.options?.length ? variant.options : [variant.option1, variant.option2, variant.option3].filter(Boolean);

  const findVariant = (product, selected) =>
    product?.variants?.find(v => getVariantOptions(v).every((opt, i) => opt === selected[i])) || null;

  const updatePrice = () => {
    if (!currentProduct) return;
    const selectedSize = sizeSelect.value || currentProduct.options.find(o => o.name.toLowerCase() === "size")?.values[0];
    const selectedOptions = currentProduct.options.map(o => {
      const name = o.name.toLowerCase();
      return name === "color" ? selectedColor : name === "size" ? selectedSize : o.values[0];
    });
    const variant = findVariant(currentProduct, selectedOptions);
    if (variant) popupPrice.textContent = formatMoney(Math.round(parseFloat(variant.price) * 100));
  };

  const createOptionElement = (val, parent, isColor = false, idx = 0) => {
    if (isColor) {
      const colorEl = document.createElement("div");
      colorEl.className = "color-option" + (val.toLowerCase().includes("white") ? " is-white" : "");
      colorEl.style.setProperty("--color-bar", val);
      colorEl.innerHTML = `<span class="color-name">${val}</span>`;
      if (idx === 0) { colorEl.classList.add("selected"); selectedColor = val; }
      colorEl.addEventListener("click", () => {
        colorSwatches.querySelectorAll(".color-option").forEach(opt => opt.classList.remove("selected"));
        colorEl.classList.add("selected");
        selectedColor = val;
        hiddenColorSelect.value = val;
        updatePrice();
      });
      parent.appendChild(colorEl);
    } else {
      const opt = document.createElement("option");
      opt.value = val;
      opt.textContent = val;
      parent.appendChild(opt);
    }
  };

  const setupDropdownAlignment = () => {
    if (!sizeSelect) return;
    const updateAlign = () => sizeSelect.style.textAlign = sizeSelect.value ? "center" : "left";
    sizeSelect.addEventListener("change", updateAlign);
    sizeSelect.addEventListener("focus", () => sizeArrow.src = upperArrow);
    sizeSelect.addEventListener("blur", () => sizeArrow.src = upperArrow);
    updateAlign();
  };

  const showPopup = async handle => {
    if (!handle) return;
    try {
      const res = await fetch(`/products/${handle}.js`);
      const data = await res.json();
      currentProduct = data;

      // Update top content
      popupImage.src = data.images?.[0] || placeholderSrc;
      popupImage.alt = data.title || "Product preview";
      popupTitle.textContent = data.title || "";
      popupPrice.textContent = formatMoney(Math.round((data.variants?.[0]?.price || 0) * 100));
      popupDescription.innerHTML = data.description || "";

      // Reset options
      sizeSelect.innerHTML = '<option value="" selected disabled hidden>Choose your size</option>';
      hiddenColorSelect.innerHTML = "";
      colorSwatches.innerHTML = "";
      colorContainer.style.display = sizeContainer.style.display = 'none';
      selectedColor = null;
      sizeArrow.src = upperArrow;

      // Populate options
      data.options?.forEach(option => {
        const name = option.name.toLowerCase();
        if (name === "size") {
          sizeContainer.style.display = "block";
          option.values.forEach(val => createOptionElement(val, sizeSelect));
          sizeSelect.onchange = updatePrice;
          setupDropdownAlignment();
        } else if (name === "color") {
          colorContainer.style.display = "block";
          option.values.forEach((val, idx) => {
            createOptionElement(val, hiddenColorSelect);
            createOptionElement(val, colorSwatches, true, idx);
          });
          updatePrice();
        }
      });

      popup.classList.remove("hidden");
      document.body.style.overflow = 'hidden';
    } catch (err) {
      console.error("Error loading product:", err);
    }
  };

  const closePopup = () => {
    popup.classList.add("hidden");
    document.body.style.overflow = '';
  };

  const addToCart = async () => {
    if (!currentProduct) return;
    const selectedSize = sizeSelect.value;
    if (!selectedSize) return alert("Please select a size before adding to cart.");

    const selectedOptions = currentProduct.options.map(o => {
      const name = o.name.toLowerCase();
      return name === "color" ? selectedColor : name === "size" ? selectedSize : o.values[0];
    });

    const variant = findVariant(currentProduct, selectedOptions);
    if (!variant) return alert("Please select valid options");

    try {
      addToCartBtn.disabled = true;
      const response = await fetch("/cart/add.js", {
        method: "POST",
        headers: { "Content-Type":"application/json", "X-Requested-With":"XMLHttpRequest" },
        body: JSON.stringify({ id: variant.id, quantity: 1 })
      });
      if (response.ok) {
        fetch('/cart.js').then(r => r.json()).then(cart => {
          document.querySelectorAll('.cart-count, [data-cart-count], #cart-count').forEach(el => el.textContent = cart.item_count);
          document.dispatchEvent(new CustomEvent('cart:updated', { detail: { cart } }));
        });
        alert("Product added to cart!");
        closePopup();
      } else throw new Error("Failed to add to cart");
    } catch (err) {
      console.error(err);
      alert("Could not add product to cart.");
    } finally { addToCartBtn.disabled = false; }
  };

 
  // Event Listeners
 
  gridItems.forEach(item => {
    const icon = item.querySelector(".popup-icon");
    icon?.addEventListener("click", e => { e.stopPropagation(); showPopup(item.dataset.handle); });
  });
  popupClose?.addEventListener("click", closePopup);
  popup?.addEventListener("click", e => { if (e.target === popup) closePopup(); });
  sizeWrapper?.addEventListener("click", () => {
    const isUpper = sizeArrow.src.includes('choose-size-upper.svg');
    sizeArrow.src = isUpper ? lowerArrow : upperArrow;
  });
  addToCartBtn?.addEventListener("click", addToCart);
}

// Initialize
if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', initCustomGrid);
else initCustomGrid();
if (typeof Shopify !== 'undefined') document.addEventListener('shopify:section:load', initCustomGrid);
