// custom-grid.js
function initCustomGrid() {
  const gridItems = document.querySelectorAll(".grid-item");
  const popup = document.getElementById("product-popup");
  const popupClose = document.getElementById("popup-close");
  const popupImage = document.getElementById("popup-image");
  const popupTitle = document.getElementById("popup-title");
  const popupPrice = document.getElementById("popup-price");
  const popupDescription = document.getElementById("popup-description");
  const sizeSelect = document.getElementById("size-select");
  const addToCartBtn = document.getElementById("add-to-cart");
  const colorOptionContainer = document.getElementById("color-option-container");
  const sizeOptionContainer = document.getElementById("size-option-container");
  const colorSwatchesContainer = document.getElementById("color-swatches");
  const hiddenColorSelect = document.getElementById("color-select");
  const sizeArrow = document.querySelector(".size-arrow");

  const placeholderSrc = popup ? (popup.dataset.placeholder || "") : "";

  let currentProduct = null;
  let selectedColor = null;

  function formatMoney(cents) {
    return (cents / 100).toLocaleString("en-US", {
      style: "currency",
      currency: "USD"
    });
  }

  function getVariantOptionsArray(variant) {
    if (!variant) return [];
    if (Array.isArray(variant.options) && variant.options.length) {
      return variant.options;
    } else {
      const arr = [];
      if (variant.option1) arr.push(variant.option1);
      if (variant.option2) arr.push(variant.option2);
      if (variant.option3) arr.push(variant.option3);
      return arr;
    }
  }

  function findVariant(product, selectedOptions) {
    if (!product || !product.variants) return null;
    return product.variants.find(variant => {
      const vOpts = getVariantOptionsArray(variant);
      if (vOpts.length !== selectedOptions.length) {
        return selectedOptions.every((sel, i) => sel === vOpts[i]);
      }
      return vOpts.every((opt, idx) => selectedOptions[idx] === opt);
    });
  }

  function updateCartCount() {
    fetch('/cart.js')
      .then(response => response.json())
      .then(cart => {
        const cartCounts = document.querySelectorAll('.cart-count, [data-cart-count], #cart-count');
        cartCounts.forEach(el => el.textContent = cart.item_count);
        document.dispatchEvent(new CustomEvent('cart:updated', { detail: { cart } }));
      })
      .catch(console.error);
  }

  function updatePrice() {
    if (!currentProduct) return;
    const selectedSizeValue = sizeSelect ? sizeSelect.value : null;
    const selectedOptions = [];

    (currentProduct.options || []).forEach(option => {
      const name = option.name.toLowerCase();
      if (name === "color") selectedOptions.push(selectedColor);
      else if (name === "size") selectedOptions.push(selectedSizeValue || option.values[0]);
      else selectedOptions.push(option.values && option.values[0] ? option.values[0] : null);
    });

    const variant = findVariant(currentProduct, selectedOptions);
    if (variant) {
      popupPrice.textContent = formatMoney(Math.round(parseFloat(variant.price) * 100));
    }
  }

  async function showProductPopup(handle) {
    if (!handle) return;
    try {
      const res = await fetch(`/products/${handle}.js`);
      const data = await res.json();
      currentProduct = data;

      popupImage.src = (data.images && data.images.length > 0) ? data.images[0] : placeholderSrc;
      popupImage.alt = data.title || "Product preview";
      popupTitle.textContent = data.title || "";
      popupPrice.textContent = (data.variants && data.variants.length > 0) 
        ? formatMoney(Math.round(parseFloat(data.variants[0].price) * 100)) 
        : "";
      popupDescription.innerHTML = data.description || "";

      // Reset options
      sizeSelect.innerHTML = '<option value="" selected disabled hidden>Choose your size</option>';
      hiddenColorSelect.innerHTML = '';
      colorSwatchesContainer.innerHTML = '';
      colorOptionContainer.style.display = 'none';
      sizeOptionContainer.style.display = 'none';
      selectedColor = null;

      if (Array.isArray(data.options)) {
        data.options.forEach(option => {
          const name = option.name.toLowerCase();
          if (name === "size") {
            sizeOptionContainer.style.display = 'block';
            option.values.forEach(val => {
              const optionElement = document.createElement("option");
              optionElement.value = val;
              optionElement.textContent = val;
              sizeSelect.appendChild(optionElement);
            });

            sizeSelect.onchange = updatePrice;

            // Arrow toggle on click
            const lowerArrow = '/assets/choose-size-lower.svg';
            const upperArrow = '/assets/choose-size-upper.svg';
            
            const wrapper = document.querySelector(".size-select-wrapper");
            const sizeArrow = wrapper.querySelector(".size-arrow");

            // Set default arrow
            sizeArrow.innerHTML = `<img src="${lowerArrow}" alt="Dropdown arrow">`;
            wrapper.addEventListener("click", () => {
              const currentSrc = sizeArrow.querySelector("img").src;
              if (currentSrc.includes("choose-size-lower.svg")) {
                sizeArrow.querySelector("img").src = upperArrow;
              } else {
                sizeArrow.querySelector("img").src = lowerArrow;
              }
          } else if (name === "color") {
            colorOptionContainer.style.display = 'block';
            option.values.forEach(val => {
              const opt = document.createElement("option");
              opt.value = val;
              opt.textContent = val;
              hiddenColorSelect.appendChild(opt);
            });

            option.values.forEach((val, index) => {
              const colorOption = document.createElement("div");
              colorOption.classList.add("color-option");
              const cleaned = (val || "").toString().trim().toLowerCase();
              if (cleaned === "white" || cleaned === "#fff" || cleaned === "#ffffff") {
                colorOption.classList.add("is-white");
              }
              colorOption.style.setProperty("--color-bar", val);

              const colorName = document.createElement("span");
              colorName.classList.add("color-name");
              colorName.textContent = val;
              colorOption.appendChild(colorName);

              if (index === 0) {
                colorOption.classList.add("selected");
                selectedColor = val;
              }

              colorOption.addEventListener("click", () => {
                colorSwatchesContainer.querySelectorAll(".color-option").forEach(opt => {
                  opt.classList.remove("selected");
                  opt.setAttribute("aria-selected", "false");
                });
                colorOption.classList.add("selected");
                colorOption.setAttribute("aria-selected", "true");
                selectedColor = val;
                hiddenColorSelect.value = val;
                updatePrice();
              });

              colorSwatchesContainer.appendChild(colorOption);
            });
            updatePrice();
          }
        });
      }

      popup.classList.remove("hidden");
      document.body.style.overflow = 'hidden';

    } catch (err) {
      console.error("Error loading product:", err);
    }
  }

  gridItems.forEach(item => {
    const popupIcon = item.querySelector(".popup-icon");
    if (!popupIcon) return;
    popupIcon.addEventListener("click", e => {
      e.stopPropagation();
      showProductPopup(item.dataset.handle);
    });
  });

  if (popupClose) {
    popupClose.addEventListener("click", () => {
      popup.classList.add("hidden");
      document.body.style.overflow = '';
    });
  }

  if (popup) {
    popup.addEventListener("click", e => {
      if (e.target === popup) {
        popup.classList.add("hidden");
        document.body.style.overflow = '';
      }
    });
  }

  if (addToCartBtn) {
    addToCartBtn.addEventListener("click", async () => {
      if (!currentProduct) return;

      const selectedSizeValue = sizeSelect ? sizeSelect.value : null;
      const selectedOptions = [];
      (currentProduct.options || []).forEach(option => {
        const name = option.name.toLowerCase();
        if (name === "color") selectedOptions.push(selectedColor);
        else if (name === "size") selectedOptions.push(selectedSizeValue || option.values[0]);
        else selectedOptions.push(option.values && option.values[0] ? option.values[0] : null);
      });

      const variant = findVariant(currentProduct, selectedOptions);
      if (!variant) {
        alert("Please select valid options");
        return;
      }

      try {
        addToCartBtn.disabled = true;
        addToCartBtn.querySelector('span').textContent = 'Adding...';
        const response = await fetch("/cart/add.js", {
          method: "POST",
          headers: { "Content-Type": "application/json", "X-Requested-With": "XMLHttpRequest" },
          body: JSON.stringify({ id: variant.id, quantity: 1 })
        });

        if (response.ok) {
          updateCartCount();
          alert("Product added to cart!");
          popup.classList.add("hidden");
          document.body.style.overflow = '';
        } else {
          throw new Error('Failed to add to cart');
        }
      } catch (err) {
        console.error(err);
        alert("Could not add product to cart.");
      } finally {
        addToCartBtn.disabled = false;
        addToCartBtn.querySelector('span').textContent = 'ADD TO CART âžœ';
      }
    });
  }
}

// Init
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initCustomGrid);
} else {
  initCustomGrid();
}
if (typeof Shopify !== 'undefined') {
  document.addEventListener('shopify:section:load', initCustomGrid);
}
