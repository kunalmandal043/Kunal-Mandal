function initCustomGrid() {
  const gridItems = document.querySelectorAll(".grid-item");
  const popup = document.getElementById("product-popup");
  const popupClose = document.getElementById("popup-close");
  const popupImage = document.getElementById("popup-image");
  const popupTitle = document.getElementById("popup-title");
  const popupPrice = document.getElementById("popup-price");
  const popupDescription = document.getElementById("popup-description");
  const sizeSelect = document.getElementById("size-select");
  const colorSelect = document.getElementById("color-select");
  const colorSwatches = document.getElementById("color-swatches");
  const addToCartBtn = document.getElementById("add-to-cart");
  const colorOptionContainer = document.getElementById("color-option-container");
  const sizeOptionContainer = document.getElementById("size-option-container");

  let currentProduct = null;

  function formatMoney(cents) {
    return (cents / 100).toLocaleString("en-US", { 
      style: "currency", 
      currency: "USD" 
    });
  }

  function findVariant(product, selectedOptions) {
    return product.variants.find(variant => {
      return variant.options.every((option, index) => {
        return selectedOptions[index] === option;
      });
    });
  }

  function updateCartCount() {
    fetch('/cart.js')
      .then(response => response.json())
      .then(cart => {
        const cartCounts = document.querySelectorAll('.cart-count, [data-cart-count], #cart-count');
        cartCounts.forEach(element => {
          element.textContent = cart.item_count;
        });
      })
      .catch(error => console.error('Error updating cart count:', error));
  }

  function updatePrice() {
    if (!currentProduct) return;
    const selectedColor = colorSelect.value;
    const selectedSize = sizeSelect.value;
    const selectedOptions = [];
    currentProduct.options.forEach(option => {
      if (option.name.toLowerCase() === "color") {
        selectedOptions.push(selectedColor);
      } else if (option.name.toLowerCase() === "size") {
        selectedOptions.push(selectedSize);
      } else {
        selectedOptions.push(option.values[0]);
      }
    });
    const variant = findVariant(currentProduct, selectedOptions);
    if (variant) {
      popupPrice.textContent = formatMoney(parseFloat(variant.price) * 100);
    }
  }

  async function showProductPopup(handle) {
    if (!handle) return;
    try {
      const res = await fetch(`/products/${handle}.js`);
      const data = await res.json();
      currentProduct = data;
      
      popupImage.src = data.images?.length ? data.images[0] : "{{ 'placeholder.png' | asset_url }}";
      popupImage.alt = data.title;
      popupTitle.textContent = data.title;
      popupPrice.textContent = data.variants?.length ? formatMoney(parseFloat(data.variants[0].price) * 100) : "";
      popupDescription.innerHTML = data.description || "";

      sizeSelect.innerHTML = "";
      colorSelect.innerHTML = "";
      colorSwatches.innerHTML = "";
      colorOptionContainer.style.display = 'none';
      sizeOptionContainer.style.display = 'none';

      if (data.options) {
        data.options.forEach(option => {
          if (option.name.toLowerCase() === "size") {
            sizeOptionContainer.style.display = 'block';
            option.values.forEach(val => {
              const optionElement = document.createElement("option");
              optionElement.value = val;
              optionElement.textContent = val;
              sizeSelect.appendChild(optionElement);
            });
          } else if (option.name.toLowerCase() === "color") {
            colorOptionContainer.style.display = 'block';
            option.values.forEach((val, index) => {
              const optionElement = document.createElement("option");
              optionElement.value = val;
              optionElement.textContent = val;
              colorSelect.appendChild(optionElement);

              const swatch = document.createElement("div");
              swatch.classList.add("color-option");
              swatch.dataset.value = val;

              const indicator = document.createElement("span");
              indicator.classList.add("color-indicator");
              indicator.style.backgroundColor = val.toLowerCase();

              const label = document.createElement("span");
              label.textContent = val;

              swatch.appendChild(indicator);
              swatch.appendChild(label);

              swatch.addEventListener("click", () => {
                colorSwatches.querySelectorAll(".color-option").forEach(s => s.classList.remove("selected"));
                swatch.classList.add("selected");
                colorSelect.value = val;
                updatePrice();
              });

              if (index === 0) {
                swatch.classList.add("selected");
                colorSelect.value = val;
              }

              colorSwatches.appendChild(swatch);
            });
          }
        });
      }

      sizeSelect.addEventListener('change', updatePrice);
      colorSelect.addEventListener('change', updatePrice);
      popup.classList.remove("hidden");
      document.body.style.overflow = 'hidden';
    } catch (err) {
      console.error("Error loading product:", err);
    }
  }

  gridItems.forEach(item => {
    const popupIcon = item.querySelector(".popup-icon");
    if (!popupIcon) return;
    popupIcon.addEventListener("click", e => {
      e.stopPropagation();
      const handle = item.dataset.handle;
      showProductPopup(handle);
    });
  });

  popupClose.addEventListener("click", () => {
    popup.classList.add("hidden");
    document.body.style.overflow = '';
  });
  popup.addEventListener("click", e => {
    if (e.target === popup) {
      popup.classList.add("hidden");
      document.body.style.overflow = '';
    }
  });

  addToCartBtn.addEventListener("click", async () => {
    if (!currentProduct) return;
    const selectedColor = colorSelect.value;
    const selectedSize = sizeSelect.value;
    const selectedOptions = [];
    currentProduct.options.forEach(option => {
      if (option.name.toLowerCase() === "color") {
        selectedOptions.push(selectedColor);
      } else if (option.name.toLowerCase() === "size") {
        selectedOptions.push(selectedSize);
      } else {
        selectedOptions.push(option.values[0]);
      }
    });
    const variant = findVariant(currentProduct, selectedOptions);
    if (!variant) {
      alert("Please select valid options");
      return;
    }
    try {
      addToCartBtn.disabled = true;
      addToCartBtn.querySelector('span').textContent = 'Adding...';
      const response = await fetch("/cart/add.js", {
        method: "POST",
        headers: { 
          "Content-Type": "application/json",
          "X-Requested-With": "XMLHttpRequest"
        },
        body: JSON.stringify({ id: variant.id, quantity: 1 })
      });
      if (response.ok) {
        updateCartCount();
        alert("Product added to cart!");
        popup.classList.add("hidden");
        document.body.style.overflow = '';
      } else {
        throw new Error('Failed to add to cart');
      }
    } catch (err) {
      console.error(err);
      alert("Could not add product to cart.");
    } finally {
      addToCartBtn.disabled = false;
      addToCartBtn.querySelector('span').textContent = 'ADD TO CART âžœ';
    }
  });
}

if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initCustomGrid);
} else {
  initCustomGrid();
}

if (typeof Shopify !== 'undefined') {
  document.addEventListener('shopify:section:load', initCustomGrid);
}
