function initCustomGrid() {
  const els = {
    gridItems: document.querySelectorAll(".grid-item"),
    popup: document.getElementById("product-popup"),
    popupClose: document.getElementById("popup-close"),
    popupImage: document.getElementById("popup-image"),
    popupTitle: document.getElementById("popup-title"),
    popupPrice: document.getElementById("popup-price"),
    popupDescription: document.getElementById("popup-description"),
    addToCartBtn: document.getElementById("add-to-cart"),
    colorOptionContainer: document.getElementById("color-option-container"),
    sizeOptionContainer: document.getElementById("size-option-container"),
    colorSwatchesContainer: document.getElementById("color-swatches"),
    hiddenColorSelect: document.getElementById("color-select"),
    sizeArrow: document.querySelector(".size-arrow"),
  };

  const placeholderSrc = els.popup?.dataset.placeholder || "";
  const lowerArrow = els.popup?.dataset.arrowLower;
  const upperArrow = els.popup?.dataset.arrowUpper;

  let currentProduct = null;
  let selectedColor = null;
  let selectedSize = null;
  let currentDropdown = null;
  let currentCustomDropdown = null;

  const formatMoney = (cents) =>
    (cents / 100).toLocaleString("en-US", { style: "currency", currency: "USD" });

  const cleanupDropdown = () => {
    if (currentCustomDropdown) currentCustomDropdown.remove();
    currentCustomDropdown = null;
    currentDropdown = null;
    // Always reset arrow to lower
    if (els.sizeArrow) els.sizeArrow.src = lowerArrow;
  };

  const closePopup = () => {
    els.popup.classList.add("hidden");
    document.body.classList.remove("popup-open");
    cleanupDropdown();
  };

  const createCustomDropdown = (container, options, placeholder) => {
    cleanupDropdown();

    const dropdownContainer = document.createElement("div");
    dropdownContainer.className = "custom-dropdown";
    currentCustomDropdown = dropdownContainer;

    const button = Object.assign(document.createElement("button"), {
      className: "dropdown-button placeholder",
      textContent: placeholder,
    });

    const optionsContainer = document.createElement("div");
    optionsContainer.className = "dropdown-options";

    options.forEach((option) => {
      const optEl = document.createElement("div");
      optEl.className = "dropdown-option";
      optEl.textContent = option;

      optEl.addEventListener("click", () => {
        optionsContainer.querySelectorAll(".dropdown-option").forEach((o) => o.classList.remove("selected"));
        optEl.classList.add("selected");
        button.textContent = option;
        button.classList.remove("placeholder");
        selectedSize = option;
        optionsContainer.style.display = "none";
        if (els.sizeArrow) els.sizeArrow.src = lowerArrow; // back to lower
        currentDropdown = null;
      });

      optionsContainer.appendChild(optEl);
    });

    button.addEventListener("click", (e) => {
      e.stopPropagation();
      const isVisible = optionsContainer.style.display === "block";

      if (!isVisible) {
        optionsContainer.style.display = "block";
        if (els.sizeArrow) els.sizeArrow.src = upperArrow; // show upper arrow
        currentDropdown = optionsContainer;
      } else {
        optionsContainer.style.display = "none";
        if (els.sizeArrow) els.sizeArrow.src = lowerArrow; // show lower arrow
        currentDropdown = null;
      }
    });

    document.addEventListener("click", (e) => {
      if (!dropdownContainer.contains(e.target) && optionsContainer.style.display === "block") {
        optionsContainer.style.display = "none";
        if (els.sizeArrow) els.sizeArrow.src = lowerArrow;
        currentDropdown = null;
      }
    });

    dropdownContainer.append(button, optionsContainer);
    const select = container.querySelector("select");
    select ? container.replaceChild(dropdownContainer, select) : container.appendChild(dropdownContainer);
    return dropdownContainer;
  };

  const showProductPopup = async (handle) => {
    try {
      const data = await (await fetch(`/products/${handle}.js`)).json();
      currentProduct = data;

      // set info
      els.popupImage.src = data.images?.[0] || placeholderSrc;
      els.popupTitle.textContent = data.title || "";
      els.popupPrice.textContent = data.variants?.[0] ? formatMoney(+data.variants[0].price * 100) : "";
      els.popupDescription.innerHTML = data.description || "";

      // reset options
      els.hiddenColorSelect.innerHTML = "";
      els.colorSwatchesContainer.innerHTML = "";
      els.colorOptionContainer.style.display = "none";
      els.sizeOptionContainer.style.display = "none";
      selectedColor = selectedSize = null;
      cleanupDropdown();

      data.options?.forEach((option) => {
        const name = option.name.toLowerCase();
        if (name === "size") {
          els.sizeOptionContainer.style.display = "block";
          if (els.sizeArrow) els.sizeArrow.src = lowerArrow; // reset arrow
          createCustomDropdown(els.sizeOptionContainer.querySelector(".size-select-wrapper"), option.values, "Choose your size");
        } else if (name === "color") {
          els.colorOptionContainer.style.display = "block";
          option.values.forEach((val, i) => {
            const opt = Object.assign(document.createElement("option"), { value: val, textContent: val });
            els.hiddenColorSelect.appendChild(opt);

            const colorOption = document.createElement("div");
            colorOption.className = "color-option";
            if (/^(white|#fff|#ffffff)$/i.test(val)) colorOption.classList.add("is-white");
            colorOption.style.setProperty("--color-bar", val);

            const label = document.createElement("span");
            label.className = "color-name";
            label.textContent = val;
            colorOption.appendChild(label);

            if (i === 0) {
              colorOption.classList.add("selected");
              selectedColor = val;
            }

            colorOption.addEventListener("click", () => {
              els.colorSwatchesContainer.querySelectorAll(".color-option").forEach((o) => o.classList.remove("selected"));
              colorOption.classList.add("selected");
              selectedColor = val;
              els.hiddenColorSelect.value = val;
            });

            els.colorSwatchesContainer.appendChild(colorOption);
          });
        }
      });

      els.popup.classList.remove("hidden");
      document.body.classList.add("popup-open");
    } catch (err) {
      console.error("Error loading product:", err);
    }
  };

  els.gridItems.forEach((item) => {
    item.querySelector(".popup-icon")?.addEventListener("click", (e) => {
      e.stopPropagation();
      showProductPopup(item.dataset.handle);
    });
  });

  els.popupClose?.addEventListener("click", closePopup);
  els.popup?.addEventListener("click", (e) => e.target === els.popup && closePopup());
}

if (document.readyState === "loading") {
  document.addEventListener("DOMContentLoaded", initCustomGrid);
} else initCustomGrid();
