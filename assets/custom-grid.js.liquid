function initCustomGrid() {
  const els = {
    gridItems: document.querySelectorAll(".grid-item"),
    popup: document.getElementById("product-popup"),
    popupClose: document.getElementById("popup-close"),
    popupImage: document.getElementById("popup-image"),
    popupTitle: document.getElementById("popup-title"),
    popupPrice: document.getElementById("popup-price"),
    popupDescription: document.getElementById("popup-description"),
    addToCartBtn: document.getElementById("add-to-cart"),
    colorOptionContainer: document.getElementById("color-option-container"),
    sizeOptionContainer: document.getElementById("size-option-container"),
    colorSwatchesContainer: document.getElementById("color-swatches"),
    hiddenColorSelect: document.getElementById("color-select"),
    sizeArrow: document.querySelector(".size-arrow"),
  };

  const placeholderSrc = els.popup?.dataset.placeholder || "";
  const lowerArrow = els.popup?.dataset.arrowLower;
  const upperArrow = els.popup?.dataset.arrowUpper;

  let currentProduct = null,
      selectedColor = null,
      selectedSize = null,
      currentDropdown = null,
      currentCustomDropdown = null;

  const formatMoney = (cents) =>
    (cents / 100).toLocaleString("en-US", { style: "currency", currency: "USD" });

  const getVariantOptionsArray = (v) =>
    !v ? [] : v.options?.length ? v.options : [v.option1, v.option2, v.option3].filter(Boolean);

  const findVariant = (product, selectedOptions) =>
    product?.variants?.find((v) => {
      const vOpts = getVariantOptionsArray(v);
      return vOpts.every((opt, i) => selectedOptions[i] === opt);
    }) || null;

  const preventBodyScroll = (state) =>
    document.body.classList.toggle("body-no-scroll", state);

  // Reset dropdown but keep arrows
  const cleanupDropdown = () => {
    if (currentCustomDropdown) {
      const optionsContainer = currentCustomDropdown.querySelector(".dropdown-options");
      const button = currentCustomDropdown.querySelector(".dropdown-button");
      optionsContainer.style.display = "none";
      button.classList.add("placeholder");
      button.textContent = "Choose your size";
      optionsContainer.querySelectorAll(".dropdown-option").forEach(o => o.classList.remove("selected"));
      selectedSize = null;
    }
    currentDropdown = null;
    if (els.sizeArrow) els.sizeArrow.src = lowerArrow;
  };

  const closePopup = () => {
    els.popup.classList.add("hidden");
    document.body.classList.remove("popup-open");
    preventBodyScroll(false);

    cleanupDropdown();

    // Reset color selection
    els.colorSwatchesContainer.querySelectorAll(".color-option").forEach((o) => {
      o.classList.remove("selected");
    });
    selectedColor = null;
  };

  const updatePrice = () => {
    if (!currentProduct) return;
    const opts = currentProduct.options.map((o) => {
      const name = o.name.toLowerCase();
      if (name === "color") return selectedColor;
      if (name === "size") return selectedSize || o.values[0];
      return o.values?.[0] || null;
    });
    const v = findVariant(currentProduct, opts);
    if (v) els.popupPrice.textContent = formatMoney(+v.price * 100);
  };

  // ---------- Dropdown ----------
  function createCustomDropdown(container, options, placeholder) {
    cleanupDropdown();

    const dropdownContainer = document.createElement("div");
    dropdownContainer.className = "custom-dropdown";
    currentCustomDropdown = dropdownContainer;

    const button = Object.assign(document.createElement("button"), {
      className: "dropdown-button placeholder",
      textContent: placeholder,
    });

    const optionsContainer = document.createElement("div");
    optionsContainer.className = "dropdown-options";

    options.forEach((option) => {
      const optEl = document.createElement("div");
      optEl.className = "dropdown-option";
      optEl.textContent = option;
      optEl.dataset.value = option;

      optEl.addEventListener("click", () => {
        optionsContainer.querySelectorAll(".dropdown-option").forEach((o) => o.classList.remove("selected"));
        optEl.classList.add("selected");
        button.textContent = option;
        button.classList.remove("placeholder");
        selectedSize = option;
        optionsContainer.style.display = "none";
        els.sizeArrow.src = lowerArrow;
        preventBodyScroll(false);
        currentDropdown = null;
        optEl.scrollIntoView({ block: "center", behavior: "smooth" });
        updatePrice();
      });

      optionsContainer.appendChild(optEl);
    });

    button.addEventListener("click", (e) => {
      e.stopPropagation();
      const isVisible = optionsContainer.style.display === "block";
      if (currentDropdown && currentDropdown !== optionsContainer) {
        currentDropdown.style.display = "none";
        els.sizeArrow.src = lowerArrow;
      }
      if (!isVisible) {
        optionsContainer.style.display = "block";
        els.sizeArrow.src = upperArrow;
        preventBodyScroll(true);
        currentDropdown = optionsContainer;
        selectedSize = null;
        button.textContent = placeholder;
        button.classList.add("placeholder");
        optionsContainer.querySelectorAll(".dropdown-option").forEach((o) => o.classList.remove("selected"));
      } else {
        optionsContainer.style.display = "none";
        els.sizeArrow.src = lowerArrow;
        preventBodyScroll(false);
        currentDropdown = null;
      }
    });

    document.addEventListener("click", (e) => {
      if (!dropdownContainer.contains(e.target) && optionsContainer.style.display === "block") {
        optionsContainer.style.display = "none";
        els.sizeArrow.src = lowerArrow;
        preventBodyScroll(false);
        currentDropdown = null;
      }
    });

    dropdownContainer.append(button, optionsContainer);
    const select = container.querySelector("select");
    select ? container.replaceChild(dropdownContainer, select) : container.appendChild(dropdownContainer);
    return dropdownContainer;
  }

  // ---------- Popup ----------
  async function showProductPopup(handle) {
    if (!handle) return;
    try {
      const data = await (await fetch(`/products/${handle}.js`)).json();
      currentProduct = data;

      els.popupImage.src = data.images?.[0] || placeholderSrc;
      els.popupTitle.textContent = data.title || "";
      els.popupPrice.textContent = data.variants?.[0] ? formatMoney(+data.variants[0].price * 100) : "";
      els.popupDescription.innerHTML = data.description || "";

      els.hiddenColorSelect.innerHTML = "";
      els.colorSwatchesContainer.innerHTML = "";
      els.colorOptionContainer.style.display = "none";
      els.sizeOptionContainer.style.display = "none";
      selectedColor = selectedSize = null;
      cleanupDropdown();

      data.options?.forEach((option) => {
        const name = option.name.toLowerCase();
        if (name === "size") {
          els.sizeOptionContainer.style.display = "block";
          createCustomDropdown(
            els.sizeOptionContainer.querySelector(".size-select-wrapper"),
            option.values,
            "Choose your size"
          );
        } else if (name === "color") {
          els.colorOptionContainer.style.display = "block";
          option.values.forEach((val, i) => {
            const opt = Object.assign(document.createElement("option"), { value: val, textContent: val });
            els.hiddenColorSelect.appendChild(opt);

            const colorOption = document.createElement("div");
            colorOption.className = "color-option";
            if (/^(white|#fff|#ffffff)$/i.test(val)) colorOption.classList.add("is-white");
            colorOption.style.setProperty("--color-bar", val);

            const label = document.createElement("span");
            label.className = "color-name";
            label.textContent = val;
            colorOption.appendChild(label);

            if (i === 0) {
              colorOption.classList.add("selected");
              selectedColor = val;
            }

            colorOption.addEventListener("click", () => {
              els.colorSwatchesContainer.querySelectorAll(".color-option").forEach((o) => {
                o.classList.remove("selected");
                o.setAttribute("aria-selected", "false");
              });
              colorOption.classList.add("selected");
              colorOption.setAttribute("aria-selected", "true");
              selectedColor = val;
              els.hiddenColorSelect.value = val;
              updatePrice();
            });

            els.colorSwatchesContainer.appendChild(colorOption);
          });
          updatePrice();
        }
      });

      els.popup.classList.remove("hidden");
      document.body.classList.add("popup-open");
      preventBodyScroll(true);
    } catch (err) {
      console.error("Error loading product:", err);
    }
  }

  // ---------- Events ----------
  els.gridItems.forEach((item) => {
    item.querySelector(".popup-icon")?.addEventListener("click", (e) => {
      e.stopPropagation();
      showProductPopup(item.dataset.handle);
    });
  });

  els.popupClose?.addEventListener("click", closePopup);
  els.popup?.addEventListener("click", (e) => e.target === els.popup && closePopup());

  if (els.addToCartBtn) {
    const addToCartIcon = els.addToCartBtn.querySelector(".add-to-cart-icon");
    els.addToCartBtn.addEventListener("click", async () => {
      if (!currentProduct) return;
      if (!selectedSize) return alert("Please select a size before adding to cart.");

      const opts = currentProduct.options.map((o) => {
        const n = o.name.toLowerCase();
        if (n === "color") return selectedColor;
        if (n === "size") return selectedSize;
        return o.values?.[0] || null;
      });

      const variant = findVariant(currentProduct, opts);
      if (!variant) return alert("Please select valid options");

      try {
        els.addToCartBtn.disabled = true;
        const res = await fetch("/cart/add.js", {
          method: "POST",
          headers: { "Content-Type": "application/json", "X-Requested-With": "XMLHttpRequest" },
          body: JSON.stringify({ id: variant.id, quantity: 1 }),
        });
        if (!res.ok) throw new Error("Failed to add to cart");

        updateCartCount();
        alert("Product added to cart!");
        closePopup();
      } catch (err) {
        console.error(err);
        alert("Could not add product to cart.");
      } finally {
        els.addToCartBtn.disabled = false;
        if (addToCartIcon) addToCartIcon.src = "{{ 'add-to-cart.svg' | asset_url }}";
      }
    });
  }

  const updateCartCount = () =>
    fetch("/cart.js")
      .then((r) => r.json())
      .then((cart) => {
        document.querySelectorAll(".cart-count, [data-cart-count], #cart-count").forEach(
          (el) => (el.textContent = cart.item_count)
        );
        document.dispatchEvent(new CustomEvent("cart:updated", { detail: { cart } }));
      })
      .catch(console.error);
}

if (document.readyState === "loading") {
  document.addEventListener("DOMContentLoaded", initCustomGrid);
} else initCustomGrid();

if (typeof Shopify !== "undefined") {
  document.addEventListener("shopify:section:load", initCustomGrid);
}
