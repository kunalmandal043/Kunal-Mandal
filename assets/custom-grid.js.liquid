// custom-grid.js
function initCustomGrid() {
  const gridItems = document.querySelectorAll(".grid-item");
  const popup = document.getElementById("product-popup");
  const popupClose = document.getElementById("popup-close");
  const popupImage = document.getElementById("popup-image");
  const popupTitle = document.getElementById("popup-title");
  const popupPrice = document.getElementById("popup-price");
  const popupDescription = document.getElementById("popup-description");
  const sizeSelect = document.getElementById("size-select");
  const addToCartBtn = document.getElementById("add-to-cart");
  const colorOptionContainer = document.getElementById("color-option-container");
  const sizeOptionContainer = document.getElementById("size-option-container");
  const colorSwatchesContainer = document.getElementById("color-swatches");
  const hiddenColorSelect = document.getElementById("color-select");

  // Read asset URLs from data attributes
  const placeholderSrc = popup?.dataset.placeholder || "";
  const lowerArrow = popup?.dataset.arrowLower || "";
  const upperArrow = popup?.dataset.arrowUpper || "";

  let currentProduct = null;
  let selectedColor = null;
  let sizeDropdownOpen = false;

  // Format money function (expects cents)
  function formatMoney(cents) {
    return (cents / 100).toLocaleString("en-US", {
      style: "currency",
      currency: "USD"
    });
  }

  // Get variant options array
  function getVariantOptionsArray(variant) {
    if (!variant) return [];
    if (Array.isArray(variant.options) && variant.options.length) return variant.options;
    const arr = [];
    if (variant.option1) arr.push(variant.option1);
    if (variant.option2) arr.push(variant.option2);
    if (variant.option3) arr.push(variant.option3);
    return arr;
  }

  function findVariant(product, selectedOptions) {
    if (!product || !product.variants) return null;
    return product.variants.find(variant => {
      const vOpts = getVariantOptionsArray(variant);
      if (vOpts.length !== selectedOptions.length) {
        return selectedOptions.every((sel, i) => sel === vOpts[i]);
      }
      return vOpts.every((opt, idx) => selectedOptions[idx] === opt);
    });
  }

  function updateCartCount() {
    fetch('/cart.js')
      .then(r => r.json())
      .then(cart => {
        document.querySelectorAll('.cart-count, [data-cart-count], #cart-count')
          .forEach(el => el.textContent = cart.item_count);
        document.dispatchEvent(new CustomEvent('cart:updated', { detail: { cart } }));
      }).catch(console.error);
  }

  function updatePrice() {
    if (!currentProduct) return;
    const selectedSize = sizeSelect?.value || null;
    const selectedOptions = [];

    (currentProduct.options || []).forEach(option => {
      const name = option.name.toLowerCase();
      if (name === "color") selectedOptions.push(selectedColor);
      else if (name === "size") selectedOptions.push(selectedSize || option.values[0]);
      else selectedOptions.push(option.values?.[0] || null);
    });

    const variant = findVariant(currentProduct, selectedOptions);
    if (variant) popupPrice.textContent = formatMoney(Math.round(parseFloat(variant.price) * 100));
  }

  async function showProductPopup(handle) {
    if (!handle) return;

    try {
      const res = await fetch(`/products/${handle}.js`);
      const data = await res.json();
      currentProduct = data;

      // Image, title, price, description
      popupImage.src = data.images?.[0] || placeholderSrc;
      popupImage.alt = data.title || "Product preview";
      popupTitle.textContent = data.title || "";
      popupPrice.textContent = data.variants?.[0]?.price ? formatMoney(Math.round(parseFloat(data.variants[0].price) * 100)) : "";
      popupDescription.innerHTML = data.description || "";

      // Clear old options
      sizeSelect.innerHTML = "";
      hiddenColorSelect.innerHTML = "";
      colorSwatchesContainer.innerHTML = "";
      colorOptionContainer.style.display = 'none';
      sizeOptionContainer.style.display = 'none';
      selectedColor = null;

      if (Array.isArray(data.options)) {
        data.options.forEach(option => {
          const name = option.name.toLowerCase();

          // Size option
          if (name === "size") {
            sizeOptionContainer.style.display = 'block';

            // Wrap size-select in a div for arrow
            const wrapper = document.createElement("div");
            wrapper.classList.add("size-select-wrapper");
            wrapper.style.position = "relative";

            const arrowImg = document.createElement("img");
            arrowImg.src = lowerArrow;
            arrowImg.classList.add("size-dropdown-arrow");
            arrowImg.style.position = "absolute";
            arrowImg.style.right = "10px";
            arrowImg.style.top = "50%";
            arrowImg.style.transform = "translateY(-50%)";
            arrowImg.style.pointerEvents = "none";

            // Move original select into wrapper
            sizeSelect.parentNode.replaceChild(wrapper, sizeSelect);
            wrapper.appendChild(sizeSelect);
            wrapper.appendChild(arrowImg);

            // Populate sizes
            option.values.forEach((val, idx) => {
              const opt = document.createElement("option");
              opt.value = val;
              opt.textContent = val;
              if (idx === 0) opt.selected = true;
              sizeSelect.appendChild(opt);
            });

            sizeSelect.onchange = updatePrice;

            // Toggle arrow on click
            sizeSelect.addEventListener("click", () => {
              sizeDropdownOpen = !sizeDropdownOpen;
              arrowImg.src = sizeDropdownOpen ? upperArrow : lowerArrow;
            });

          } else if (name === "color") {
            colorOptionContainer.style.display = 'block';
            option.values.forEach(val => {
              const opt = document.createElement("option");
              opt.value = val;
              opt.textContent = val;
              hiddenColorSelect.appendChild(opt);
            });

            option.values.forEach((val, index) => {
              const colorOption = document.createElement("div");
              colorOption.classList.add("color-option");
              if (["white", "#fff", "#ffffff"].includes(val.trim().toLowerCase())) colorOption.classList.add("is-white");
              colorOption.style.setProperty("--color-bar", val);
              const colorName = document.createElement("span");
              colorName.textContent = val;
              colorOption.appendChild(colorName);

              if (index === 0) {
                colorOption.classList.add("selected");
                selectedColor = val;
              }

              colorOption.addEventListener("click", () => {
                colorSwatchesContainer.querySelectorAll(".color-option").forEach(opt => {
                  opt.classList.remove("selected");
                  opt.setAttribute("aria-selected", "false");
                });
                colorOption.classList.add("selected");
                colorOption.setAttribute("aria-selected", "true");
                selectedColor = val;
                hiddenColorSelect.value = val;
                updatePrice();
              });

              colorSwatchesContainer.appendChild(colorOption);
            });

            updatePrice();
          }
        });
      }

      popup.classList.remove("hidden");
      document.body.style.overflow = 'hidden';

    } catch (err) {
      console.error("Error loading product:", err);
    }
  }

  // Grid item click handlers
  gridItems.forEach(item => {
    const popupIcon = item.querySelector(".popup-icon");
    if (!popupIcon) return;
    popupIcon.addEventListener("click", e => {
      e.stopPropagation();
      showProductPopup(item.dataset.handle);
    });
  });

  // Close popup
  popupClose?.addEventListener("click", () => {
    popup.classList.add("hidden");
    document.body.style.overflow = '';
  });

  popup?.addEventListener("click", e => {
    if (e.target === popup) {
      popup.classList.add("hidden");
      document.body.style.overflow = '';
    }
  });

  // Add to cart
  addToCartBtn?.addEventListener("click", async () => {
    if (!currentProduct) return;
    const selectedSize = sizeSelect?.value || null;
    const selectedOptions = [];

    (currentProduct.options || []).forEach(option => {
      const name = option.name.toLowerCase();
      if (name === "color") selectedOptions.push(selectedColor);
      else if (name === "size") selectedOptions.push(selectedSize || option.values[0]);
      else selectedOptions.push(option.values?.[0] || null);
    });

    const variant = findVariant(currentProduct, selectedOptions);
    if (!variant) {
      alert("Please select valid options");
      return;
    }

    try {
      addToCartBtn.disabled = true;
      addToCartBtn.querySelector('span').textContent = 'Adding...';

      const response = await fetch("/cart/add.js", {
        method: "POST",
        headers: { "Content-Type": "application/json", "X-Requested-With": "XMLHttpRequest" },
        body: JSON.stringify({ id: variant.id, quantity: 1 })
      });

      if (response.ok) {
        updateCartCount();
        alert("Product added to cart!");
        popup.classList.add("hidden");
        document.body.style.overflow = '';
      } else throw new Error('Failed to add to cart');
    } catch (err) {
      console.error(err);
      alert("Could not add product to cart.");
    } finally {
      addToCartBtn.disabled = false;
      addToCartBtn.querySelector('span').textContent = 'ADD TO CART âžœ';
    }
  });
}

// Init
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initCustomGrid);
} else {
  initCustomGrid();
}

if (typeof Shopify !== 'undefined') {
  document.addEventListener('shopify:section:load', initCustomGrid);
}
