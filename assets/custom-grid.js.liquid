// custom-grid.js
document.addEventListener("DOMContentLoaded", () => {
  const gridItems = document.querySelectorAll(".grid-item");
  const popup = document.getElementById("product-popup");
  const popupClose = document.getElementById("popup-close");
  const popupImage = document.getElementById("popup-image");
  const popupTitle = document.getElementById("popup-title");
  const popupPrice = document.getElementById("popup-price");
  const popupDescription = document.getElementById("popup-description");
  const sizeSelect = document.getElementById("size-select");
  const colorSelect = document.getElementById("color-select");
  const addToCartBtn = document.getElementById("add-to-cart");
  const colorOptionContainer = document.getElementById("color-option-container");
  const sizeOptionContainer = document.getElementById("size-option-container");

  let currentProduct = null;

  // Format money function
  function formatMoney(cents) {
    return (cents / 100).toLocaleString("en-US", { 
      style: "currency", 
      currency: "USD" 
    });
  }

  // Find variant based on selected options
  function findVariant(product, selectedOptions) {
    return product.variants.find(variant => {
      return variant.options.every((option, index) => {
        return selectedOptions[index] === option;
      });
    });
  }

  // Update cart count in the UI
  function updateCartCount() {
    // Fetch the current cart
    fetch('/cart.js')
      .then(response => response.json())
      .then(cart => {
        // Update all elements that display cart count
        const cartCountElements = document.querySelectorAll('.cart-count, .js-cart-count, #cart-count');
        cartCountElements.forEach(element => {
          element.textContent = cart.item_count;
        });
        
        // If your theme uses a data attribute
        const cartIcons = document.querySelectorAll('[data-cart-count]');
        cartIcons.forEach(icon => {
          icon.setAttribute('data-cart-count', cart.item_count);
          icon.textContent = cart.item_count;
        });
      })
      .catch(error => {
        console.error('Error fetching cart:', error);
      });
  }

  // Update price when options change
  function updatePrice() {
    if (!currentProduct) return;
    
    const selectedColor = colorSelect.value;
    const selectedSize = sizeSelect.value;
    
    // Create options array in the correct order
    const selectedOptions = [];
    currentProduct.options.forEach(option => {
      if (option.name.toLowerCase() === "color") {
        selectedOptions.push(selectedColor);
      } else if (option.name.toLowerCase() === "size") {
        selectedOptions.push(selectedSize);
      } else {
        // For other options, use the first available value
        selectedOptions.push(option.values[0]);
      }
    });
    
    const variant = findVariant(currentProduct, selectedOptions);
    if (variant) {
      popupPrice.textContent = formatMoney(parseFloat(variant.price) * 100);
    }
  }

  gridItems.forEach(item => {
    const popupIcon = item.querySelector(".popup-icon");
    if (!popupIcon) return;

    popupIcon.addEventListener("click", async (e) => {
      e.stopPropagation();
      const handle = item.dataset.handle;
      if (!handle) return;

      try {
        const res = await fetch(`/products/${handle}.js`);
        const data = await res.json();
        currentProduct = data;
        
        // Set image
        popupImage.src = data.images && data.images.length > 0 
          ? data.images[0] 
          : "{{ 'placeholder.png' | asset_url }}";
        popupImage.alt = data.title;

        // Set title, price, description
        popupTitle.textContent = data.title;
        
        // Use first variant's price initially
        if (data.variants && data.variants.length > 0) {
          popupPrice.textContent = formatMoney(parseFloat(data.variants[0].price) * 100);
        }
        
        popupDescription.innerHTML = data.description || "";

        // Clear previous options
        sizeSelect.innerHTML = "";
        colorSelect.innerHTML = "";
        
        // Hide option containers initially
        colorOptionContainer.style.display = 'none';
        sizeOptionContainer.style.display = 'none';

        // Populate options
        if (data.options) {
          data.options.forEach(option => {
            if (option.name.toLowerCase() === "size") {
              sizeOptionContainer.style.display = 'block';
              option.values.forEach(val => {
                const optionElement = document.createElement("option");
                optionElement.value = val;
                optionElement.textContent = val;
                sizeSelect.appendChild(optionElement);
              });
            } else if (option.name.toLowerCase() === "color") {
              colorOptionContainer.style.display = 'block';
              option.values.forEach(val => {
                const optionElement = document.createElement("option");
                optionElement.value = val;
                optionElement.textContent = val;
                colorSelect.appendChild(optionElement);
              });
            }
          });
        }

        // Add event listeners for option changes
        sizeSelect.addEventListener('change', updatePrice);
        colorSelect.addEventListener('change', updatePrice);
        
        // Show popup
        popup.classList.remove("hidden");
        document.body.style.overflow = 'hidden'; // Prevent scrolling
      } catch (err) {
        console.error("Error loading product:", err);
      }
    });
  });

  // Close popup
  popupClose.addEventListener("click", () => {
    popup.classList.add("hidden");
    document.body.style.overflow = ''; // Re-enable scrolling
  });
  
  popup.addEventListener("click", e => {
    if (e.target === popup) {
      popup.classList.add("hidden");
      document.body.style.overflow = ''; // Re-enable scrolling
    }
  });

  // Add to Cart
  addToCartBtn.addEventListener("click", async () => {
    if (!currentProduct) return;
    
    const selectedColor = colorSelect.value;
    const selectedSize = sizeSelect.value;
    
    // Create options array in the correct order
    const selectedOptions = [];
    currentProduct.options.forEach(option => {
      if (option.name.toLowerCase() === "color") {
        selectedOptions.push(selectedColor);
      } else if (option.name.toLowerCase() === "size") {
        selectedOptions.push(selectedSize);
      } else {
        // For other options, use the first available value
        selectedOptions.push(option.values[0]);
      }
    });
    
    const variant = findVariant(currentProduct, selectedOptions);
    
    if (!variant) {
      alert("Please select valid options");
      return;
    }

    try {
      await fetch("/cart/add.js", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id: variant.id, quantity: 1 })
      });
      
      // Update the cart count in the UI
      updateCartCount();
      
      alert("Product added to cart!");
      popup.classList.add("hidden");
      document.body.style.overflow = ''; // Re-enable scrolling
    } catch (err) {
      console.error(err);
      alert("Could not add product to cart.");
    }
  });
});