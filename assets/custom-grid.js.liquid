// custom-grid.js
function initCustomGrid() {
  const gridItems = document.querySelectorAll(".grid-item");
  const popup = document.getElementById("product-popup");
  const popupClose = document.getElementById("popup-close");
  const popupImage = document.getElementById("popup-image");
  const popupTitle = document.getElementById("popup-title");
  const popupPrice = document.getElementById("popup-price");
  const popupDescription = document.getElementById("popup-description");
  const sizeSelect = document.getElementById("size-select");
  const addToCartBtn = document.getElementById("add-to-cart");
  const colorOptionContainer = document.getElementById("color-option-container");
  const sizeOptionContainer = document.getElementById("size-option-container");
  const colorSwatchesContainer = document.getElementById("color-swatches");

  let currentProduct = null;
  let selectedColor = null;

  /* ---------------- helpers ---------------- */

  function formatMoney(cents) {
    return (cents / 100).toLocaleString("en-US", { style: "currency", currency: "USD" });
  }

  function findVariant(product, selectedOptions) {
    return product.variants.find(variant => {
      return variant.options.every((option, index) => selectedOptions[index] === option);
    });
  }

  function updateCartCount() {
    fetch('/cart.js')
      .then(r => r.json())
      .then(cart => {
        document.querySelectorAll('.cart-count, [data-cart-count], #cart-count')
          .forEach(el => { el.textContent = cart.item_count; });
        document.dispatchEvent(new CustomEvent('cart:updated', { detail: { cart } }));
      })
      .catch(err => console.error('Error updating cart count:', err));
  }

  function rgbFromColorString(colorString) {
    // Create a temp element to let the browser resolve CSS color names/hex
    const el = document.createElement('div');
    el.style.backgroundColor = colorString;
    document.body.appendChild(el);
    const rgb = getComputedStyle(el).backgroundColor; // e.g. "rgb(255, 0, 0)" or "rgba(..."
    document.body.removeChild(el);

    const m = rgb.match(/rgba?\((\d+)\D+(\d+)\D+(\d+)/i);
    if (!m) return [255, 255, 255];
    return [parseInt(m[1], 10), parseInt(m[2], 10), parseInt(m[3], 10)];
  }

  function isDarkColor(colorString) {
    const [r, g, b] = rgbFromColorString(colorString);
    // relative luminance approx
    const luminance = (0.2126*(r/255) + 0.7152*(g/255) + 0.0722*(b/255));
    return luminance < 0.6; // slightly generous so text is readable
  }

  function applySelectionBackground(optionEl, colorString) {
    optionEl.style.backgroundColor = colorString;
    optionEl.style.color = isDarkColor(colorString) ? '#fff' : '#000';
  }

  function clearSelectionBackground(optionEl) {
    optionEl.style.backgroundColor = '';
    optionEl.style.color = '';
  }

  /* --------------- price update --------------- */
  function updatePrice() {
    if (!currentProduct) return;

    const selectedSize = sizeSelect.value;
    const selectedOptions = [];

    currentProduct.options.forEach(option => {
      const name = (option.name || '').toLowerCase();
      if (name === "color") {
        selectedOptions.push(selectedColor);
      } else if (name === "size") {
        selectedOptions.push(selectedSize);
      } else {
        selectedOptions.push(option.values[0]);
      }
    });

    const variant = findVariant(currentProduct, selectedOptions);
    if (variant) {
      popupPrice.textContent = formatMoney(parseFloat(variant.price) * 100);
      // Optional: swap image to variant image if available
      if (variant.featured_image && variant.featured_image.src) {
        popupImage.src = variant.featured_image.src;
      }
    }
  }

  /* --------------- popup open --------------- */
  async function showProductPopup(handle) {
    if (!handle) return;

    try {
      const res = await fetch(`/products/${handle}.js`);
      const data = await res.json();
      currentProduct = data;

      // Image
      popupImage.src = (data.images && data.images.length > 0) ? data.images[0] : "{{ 'placeholder.png' | asset_url }}";
      popupImage.alt = data.title;

      // Title, price, description
      popupTitle.textContent = data.title;
      if (data.variants && data.variants.length > 0) {
        popupPrice.textContent = formatMoney(parseFloat(data.variants[0].price) * 100);
      }
      popupDescription.innerHTML = data.description || "";

      // Reset option UIs
      sizeSelect.innerHTML = "";
      colorSwatchesContainer.innerHTML = "";
      colorOptionContainer.style.display = 'none';
      sizeOptionContainer.style.display = 'none';
      selectedColor = null;

      // Build options
      if (data.options) {
        data.options.forEach(option => {
          const name = (option.name || '').toLowerCase();

          if (name === "size") {
            sizeOptionContainer.style.display = 'block';
            option.values.forEach(val => {
              const optEl = document.createElement("option");
              optEl.value = val;
              optEl.textContent = val;
              sizeSelect.appendChild(optEl);
            });
          }

          if (name === "color") {
            colorOptionContainer.style.display = 'block';

            option.values.forEach((val, index) => {
              const colorOption = document.createElement("div");
              colorOption.classList.add("color-option");
              colorOption.dataset.color = val;

              const swatch = document.createElement("div");
              swatch.classList.add("color-swatch");

              // Use color value directly (named color or hex). If invalid, browser falls back; we add our own fallback.
              swatch.style.backgroundColor = val;
              const computed = getComputedStyle(swatch).backgroundColor;
              if (!computed || computed === 'rgba(0, 0, 0, 0)') {
                swatch.style.backgroundColor = '#ccc';
              }

              // Keep white visible with a subtle outline
              if ((val || '').toLowerCase().trim() === 'white') {
                swatch.style.border = '1px solid #aaa';
              }

              const label = document.createElement("span");
              label.classList.add("color-name");
              label.textContent = val;

              colorOption.appendChild(swatch);
              colorOption.appendChild(label);

              // Default select first color
              if (index === 0) {
                colorOption.classList.add("selected");
                selectedColor = val;
                applySelectionBackground(colorOption, val);
              }

              colorOption.addEventListener("click", () => {
                // clear others
                document.querySelectorAll(".color-option").forEach(opt => {
                  opt.classList.remove("selected");
                  clearSelectionBackground(opt);
                });
                // select this
                colorOption.classList.add("selected");
                selectedColor = val;
                applySelectionBackground(colorOption, val);
                updatePrice();
              });

              colorSwatchesContainer.appendChild(colorOption);
            });
          }
        });
      }

      // Listeners
      sizeSelect.addEventListener('change', updatePrice, { once: false });

      // Show popup
      popup.classList.remove("hidden");
      document.body.style.overflow = 'hidden';
      // Ensure price matches selected defaults
      updatePrice();
    } catch (err) {
      console.error("Error loading product:", err);
    }
  }

  /* --------------- bind grid --------------- */
  document.querySelectorAll(".grid-item").forEach(item => {
    const popupIcon = item.querySelector(".popup-icon");
    if (!popupIcon) return;
    popupIcon.addEventListener("click", (e) => {
      e.stopPropagation();
      const handle = item.dataset.handle;
      showProductPopup(handle);
    });
  });

  /* --------------- close popup --------------- */
  popupClose.addEventListener("click", () => {
    popup.classList.add("hidden");
    document.body.style.overflow = '';
  });

  popup.addEventListener("click", e => {
    if (e.target === popup) {
      popup.classList.add("hidden");
      document.body.style.overflow = '';
    }
  });

  /* --------------- add to cart --------------- */
  addToCartBtn.addEventListener("click", async () => {
    if (!currentProduct) return;

    const selectedSize = sizeSelect.value;
    const selectedOptions = [];
    currentProduct.options.forEach(option => {
      const name = (option.name || '').toLowerCase();
      if (name === "color") selectedOptions.push(selectedColor);
      else if (name === "size") selectedOptions.push(selectedSize);
      else selectedOptions.push(option.values[0]);
    });

    const variant = findVariant(currentProduct, selectedOptions);
    if (!variant) {
      alert("Please select valid options");
      return;
    }

    try {
      addToCartBtn.disabled = true;
      addToCartBtn.querySelector('span').textContent = 'Adding...';

      const response = await fetch("/cart/add.js", {
        method: "POST",
        headers: { "Content-Type": "application/json", "X-Requested-With": "XMLHttpRequest" },
        body: JSON.stringify({ id: variant.id, quantity: 1 })
      });

      if (response.ok) {
        updateCartCount();
        alert("Product added to cart!");
        popup.classList.add("hidden");
        document.body.style.overflow = '';
      } else {
        throw new Error('Failed to add to cart');
      }
    } catch (err) {
      console.error(err);
      alert("Could not add product to cart.");
    } finally {
      addToCartBtn.disabled = false;
      addToCartBtn.querySelector('span').textContent = 'ADD TO CART âžœ';
    }
  });
}

/* --------------- init --------------- */
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initCustomGrid);
} else {
  initCustomGrid();
}
if (typeof Shopify !== 'undefined') {
  document.addEventListener('shopify:section:load', initCustomGrid);
}
