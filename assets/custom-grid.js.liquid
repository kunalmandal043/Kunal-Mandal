document.addEventListener("DOMContentLoaded", function () {
  // Replace missing images with fallback from JSON
  document.querySelectorAll("img[data-fallback-handle]").forEach(img => {
    const handle = img.dataset.fallbackHandle;
    if (window.fallbackImages && window.fallbackImages[handle]) {
      img.src = window.fallbackImages[handle];
    }
  });

  const popup = document.getElementById("product-popup");
  const popupClose = document.getElementById("popup-close");
  const popupImage = document.getElementById("popup-image");
  const popupTitle = document.getElementById("popup-title");
  const popupPrice = document.getElementById("popup-price");
  const popupDescription = document.getElementById("popup-description");
  const variantSelect = document.getElementById("variant-select");
  const addToCartBtn = document.getElementById("add-to-cart");

  let selectedProductId = null;
  let selectedVariantId = null;

  // Open popup on clicking the circle icon
  document.querySelectorAll(".grid-item .popup-icon").forEach(icon => {
    icon.addEventListener("click", async (e) => {
      const gridItem = e.target.closest(".grid-item");

      selectedProductId = gridItem.dataset.productId;

      // Fill popup with product info
      popupTitle.textContent = gridItem.dataset.productTitle;
      popupPrice.textContent = gridItem.dataset.productPrice;
      popupDescription.textContent = gridItem.dataset.productDescription;

      const productHandle = gridItem.dataset.productHandle;

      // Fetch product JSON from Shopify
      const res = await fetch(`/products/${productHandle}.js`);
      const productData = await res.json();

      // Set product image
      if (productData.images && productData.images.length > 0) {
        popupImage.src = productData.images[0];
      }

      // Populate variants
      variantSelect.innerHTML = "";
      productData.variants.forEach(v => {
        const option = document.createElement("option");
        option.value = v.id;
        option.textContent = v.title;
        variantSelect.appendChild(option);
      });

      selectedVariantId = productData.variants[0].id;

      popup.classList.remove("hidden");
    });
  });

  // Close popup
  popupClose.addEventListener("click", () => {
    popup.classList.add("hidden");
  });

  // Update selected variant
  variantSelect.addEventListener("change", (e) => {
    selectedVariantId = e.target.value;
  });

  // Add to cart
  addToCartBtn.addEventListener("click", async () => {
    if (!selectedVariantId) return;

    await fetch("/cart/add.js", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        items: [{ id: selectedVariantId, quantity: 1 }]
      })
    });

    alert("Product added to cart!");
    popup.classList.add("hidden");
  });
});

