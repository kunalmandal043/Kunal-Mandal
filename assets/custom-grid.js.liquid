// Quick View interactions: open/close, populate basic data, simple swatches
(function(){
  const modal = document.getElementById('product-popup');
  const closeBtn = document.getElementById('popup-close');
  const imageEl = document.getElementById('popup-image');
  const titleEl = document.getElementById('popup-title');
  const priceEl = document.getElementById('popup-price');
  const descEl = document.getElementById('popup-description');
  const sizeSelect = document.getElementById('size-select');
  const colorGroup = document.getElementById('color-group');

  // Open modal from grid icon
  document.addEventListener('click', async (e) => {
    const icon = e.target.closest('.popup-icon');
    if (!icon) return;

    const card = icon.closest('.grid-item');
    const handle = card?.dataset.handle;
    if (!handle) return;

    // Basic product fetch via JSON endpoint
    const res = await fetch(`/products/${handle}.js`);
    const product = await res.json();

    // Populate media and text
    const img = product?.images?. || '';
    imageEl.src = img || imageEl.src;
    imageEl.alt = product.title || 'Product image';
    titleEl.textContent = product.title || '';
    priceEl.textContent = formatMoney(product.price);
    descEl.textContent = product.description?.replace(/<[^>]*>/g, '').slice(0, 260) || '';

    // Build color swatches (from option named 'Color')
    colorGroup.innerHTML = '';
    const colorOpt = product.options?.find(o => /color/i.test(o.name));
    if (colorOpt) {
      colorOpt.values.slice(0, 2).forEach((val, idx) => {
        const btn = document.createElement('button');
        btn.type = 'button';
        btn.className = 'swatch' + (idx === 0 ? ' is-active' : '');
        btn.textContent = val;
        btn.dataset.value = val;
        btn.setAttribute('role','radio');
        btn.setAttribute('aria-checked', idx === 0 ? 'true' : 'false');
        colorGroup.appendChild(btn);
      });
    } else {
      // Fallback two swatches
      ['White','Black'].forEach((val, idx) => {
        const btn = document.createElement('button');
        btn.type = 'button';
        btn.className = 'swatch' + (idx === 0 ? ' is-active' : '');
        btn.textContent = val;
        btn.dataset.value = val;
        btn.setAttribute('role','radio');
        btn.setAttribute('aria-checked', idx === 0 ? 'true' : 'false');
        colorGroup.appendChild(btn);
      });
    }

    // Build size select (from option named 'Size')
    sizeSelect.innerHTML = '';
    const sizeOpt = product.options?.find(o => /size/i.test(o.name));
    const sizes = sizeOpt ? sizeOpt.values : ['XS','S','M','L','XL'];
    const placeholder = document.createElement('option');
    placeholder.textContent = 'Choose your size';
    placeholder.selected = true; placeholder.disabled = true;
    sizeSelect.appendChild(placeholder);
    sizes.forEach(v => {
      const o = document.createElement('option');
      o.value = v; o.textContent = v;
      sizeSelect.appendChild(o);
    });

    // Show modal
    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  });

  // Swatch toggle
  colorGroup?.addEventListener('click', (e) => {
    const btn = e.target.closest('.swatch');
    if (!btn) return;
    colorGroup.querySelectorAll('.swatch').forEach(b=>{
      b.classList.remove('is-active');
      b.setAttribute('aria-checked','false');
    });
    btn.classList.add('is-active');
    btn.setAttribute('aria-checked','true');
  });

  // Close handlers
  closeBtn?.addEventListener('click', () => closeModal());
  modal?.addEventListener('click', (e) => {
    if (e.target === modal) closeModal();
  });
  function closeModal(){
    modal.classList.add('hidden');
    document.body.style.overflow = '';
  }

  // Utility: format cents to money
  function formatMoney(cents){
    try{
      const v = (cents/100);
      return new Intl.NumberFormat(undefined, { style:'currency', currency: Shopify.currency.active || 'USD' }).format(v);
    }catch(_){
      return `$${(cents/100).toFixed(2)}`;
    }
  }
})();
