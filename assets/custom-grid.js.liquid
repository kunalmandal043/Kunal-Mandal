// custom-grid.js
function initCustomGrid() {
  const gridItems = document.querySelectorAll(".grid-item");
  const popup = document.getElementById("product-popup");
  const popupClose = document.getElementById("popup-close");
  const popupImage = document.getElementById("popup-image");
  const popupTitle = document.getElementById("popup-title");
  const popupPrice = document.getElementById("popup-price");
  const popupDescription = document.getElementById("popup-description");
  const sizeSelect = document.getElementById("size-select");
  const addToCartBtn = document.getElementById("add-to-cart");
  const colorOptionContainer = document.getElementById("color-option-container");
  const sizeOptionContainer = document.getElementById("size-option-container");
  const colorSwatchesContainer = document.getElementById("color-swatches");

  let currentProduct = null;
  let selectedColor = null;

  // Format money function
  function formatMoney(cents) {
    return (cents / 100).toLocaleString("en-US", { 
      style: "currency", 
      currency: "USD" 
    });
  }

  // Find variant based on selected options
  function findVariant(product, selectedOptions) {
    return product.variants.find(variant => {
      return variant.options.every((option, index) => {
        return selectedOptions[index] === option;
      });
    });
  }

  // Update cart count in header
  function updateCartCount() {
    fetch('/cart.js')
      .then(response => response.json())
      .then(cart => {
        // Update all cart count elements
        const cartCounts = document.querySelectorAll('.cart-count, [data-cart-count], #cart-count');
        cartCounts.forEach(element => {
          element.textContent = cart.item_count;
        });
        
        // Dispatch event for other parts of the theme
        document.dispatchEvent(new CustomEvent('cart:updated', {
          detail: {
            cart: cart
          }
        }));
      })
      .catch(error => {
        console.error('Error updating cart count:', error);
      });
  }

  // Update price when options change
  function updatePrice() {
    if (!currentProduct) return;
    
    const selectedSize = sizeSelect.value;
    
    // Create options array in the correct order
    const selectedOptions = [];
    currentProduct.options.forEach(option => {
      if (option.name.toLowerCase() === "color") {
        selectedOptions.push(selectedColor);
      } else if (option.name.toLowerCase() === "size") {
        selectedOptions.push(selectedSize);
      } else {
        // For other options, use the first available value
        selectedOptions.push(option.values[0]);
      }
    });
    
    const variant = findVariant(currentProduct, selectedOptions);
    if (variant) {
      popupPrice.textContent = formatMoney(parseFloat(variant.price) * 100);
    }
  }

  // Function to show product popup
  async function showProductPopup(handle) {
    if (!handle) return;

    try {
      const res = await fetch(`/products/${handle}.js`);
      const data = await res.json();
      currentProduct = data;
      
      // Set image
      popupImage.src = data.images && data.images.length > 0 
        ? data.images[0] 
        : "{{ 'placeholder.png' | asset_url }}";
      popupImage.alt = data.title;

      // Set title, price, description
      popupTitle.textContent = data.title;
      
      // Use first variant's price initially
      if (data.variants && data.variants.length > 0) {
        popupPrice.textContent = formatMoney(parseFloat(data.variants[0].price) * 100);
      }
      
      popupDescription.innerHTML = data.description || "";

      // Clear previous options
      sizeSelect.innerHTML = "";
      colorSwatchesContainer.innerHTML = "";
      
      // Hide option containers initially
      colorOptionContainer.style.display = 'none';
      sizeOptionContainer.style.display = 'none';

      // Populate options
      if (data.options) {
        data.options.forEach(option => {
          if (option.name.toLowerCase() === "size") {
            sizeOptionContainer.style.display = 'block';
            option.values.forEach(val => {
              const optionElement = document.createElement("option");
              optionElement.value = val;
              optionElement.textContent = val;
              sizeSelect.appendChild(optionElement);
            });
          } else if (option.name.toLowerCase() === "color") {
            colorOptionContainer.style.display = 'block';
            
            // Create color swatches instead of dropdown
            option.values.forEach((val, index) => {
              const swatch = document.createElement("div");
              swatch.classList.add("color-swatch");
              
              // Add specific class for white/black colors
              if (val.toLowerCase() === "white") {
                swatch.classList.add("white");
                swatch.style.backgroundColor = "#fff";
              } else if (val.toLowerCase() === "black") {
                swatch.classList.add("black");
                swatch.style.backgroundColor = "#000";
              } else {
                // For other colors, try to set background color based on name
                swatch.style.backgroundColor = val.toLowerCase();
              }
              
              swatch.dataset.value = val;
              swatch.title = val;
              
              // Select first color by default
              if (index === 0) {
                swatch.classList.add("selected");
                selectedColor = val;
              }
              
              swatch.addEventListener("click", () => {
                // Remove selected class from all swatches
                document.querySelectorAll(".color-swatch").forEach(s => {
                  s.classList.remove("selected");
                });
                
                // Add selected class to clicked swatch
                swatch.classList.add("selected");
                selectedColor = val;
                updatePrice();
              });
              
              colorSwatchesContainer.appendChild(swatch);
            });
          }
        });
      }

      // Add event listeners for option changes
      sizeSelect.addEventListener('change', updatePrice);
      
      // Show popup
      popup.classList.remove("hidden");
      document.body.style.overflow = 'hidden'; // Prevent scrolling
    } catch (err) {
      console.error("Error loading product:", err);
    }
  }

  // Add event listeners to grid items
  gridItems.forEach(item => {
    const popupIcon = item.querySelector(".popup-icon");
    if (!popupIcon) return;

    popupIcon.addEventListener("click", (e) => {
      e.stopPropagation();
      const handle = item.dataset.handle;
      showProductPopup(handle);
    });
  });

  // Close popup
  popupClose.addEventListener("click", () => {
    popup.classList.add("hidden");
    document.body.style.overflow = ''; // Re-enable scrolling
  });
  
  popup.addEventListener("click", e => {
    if (e.target === popup) {
      popup.classList.add("hidden");
      document.body.style.overflow = ''; // Re-enable scrolling
    }
  });

  // Add to Cart
  addToCartBtn.addEventListener("click", async () => {
    if (!currentProduct) return;
    
    const selectedSize = sizeSelect.value;
    
    // Create options array in the correct order
    const selectedOptions = [];
    currentProduct.options.forEach(option => {
      if (option.name.toLowerCase() === "color") {
        selectedOptions.push(selectedColor);
      } else if (option.name.toLowerCase() === "size") {
        selectedOptions.push(selectedSize);
      } else {
        // For other options, use the first available value
        selectedOptions.push(option.values[0]);
      }
    });
    
    const variant = findVariant(currentProduct, selectedOptions);
    
    if (!variant) {
      alert("Please select valid options");
      return;
    }

    try {
      // Show loading state
      addToCartBtn.disabled = true;
      addToCartBtn.querySelector('span').textContent = 'Adding...';
      
      const response = await fetch("/cart/add.js", {
        method: "POST",
        headers: { 
          "Content-Type": "application/json",
          "X-Requested-With": "XMLHttpRequest"
        },
        body: JSON.stringify({ id: variant.id, quantity: 1 })
      });
      
      if (response.ok) {
        // Update cart count
        updateCartCount();
        
        alert("Product added to cart!");
        popup.classList.add("hidden");
        document.body.style.overflow = ''; // Re-enable scrolling
      } else {
        throw new Error('Failed to add to cart');
      }
    } catch (err) {
      console.error(err);
      alert("Could not add product to cart.");
    } finally {
      // Reset button state
      addToCartBtn.disabled = false;
      addToCartBtn.querySelector('span').textContent = 'Add to Cart';
    }
  });
}

// Initialize when DOM is loaded
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initCustomGrid);
} else {
  initCustomGrid();
}

// Reinitialize when Shopify's AJAX page loading completes
if (typeof Shopify !== 'undefined') {
  document.addEventListener('shopify:section:load', initCustomGrid);
}