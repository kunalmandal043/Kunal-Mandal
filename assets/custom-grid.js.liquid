document.addEventListener("DOMContentLoaded", () => {
  const popup = document.getElementById("product-popup");
  const popupClose = document.getElementById("popup-close");
  const popupImage = document.getElementById("popup-image");
  const popupTitle = document.getElementById("popup-title");
  const popupPrice = document.getElementById("popup-price");
  const popupDescription = document.getElementById("popup-description");
  const sizeSelect = document.getElementById("size-select");
  const colorSelect = document.getElementById("color-select");
  const addToCartBtn = document.getElementById("add-to-cart");

  let currentProduct = null;

  // Event delegation: handle popup click for all products
  document.querySelector(".grid-container").addEventListener("click", async (e) => {
    const popupIcon = e.target.closest(".popup-icon");
    if (!popupIcon) return;

    const gridItem = e.target.closest(".grid-item");
    if (!gridItem) return;

    const handle = gridItem.dataset.handle;
    if (!handle) return console.error("Missing product handle");

    try {
      const response = await fetch(`/products/${handle}.js`);
      if (!response.ok) throw new Error(`Product fetch failed for ${handle}`);
      const product = await response.json();
      currentProduct = product;

      // Product Image
      popupImage.src = product.images.length > 0 ? product.images[0].src : "{{ 'placeholder.png' | asset_url }}";

      // Product Info
      popupTitle.textContent = product.title;
      popupPrice.textContent = formatMoney(parseFloat(product.variants[0].price) * 100);
      popupDescription.innerHTML = product.body_html || "";

      // Options
      sizeSelect.innerHTML = "";
      colorSelect.innerHTML = "";

      product.options.forEach((opt, i) => {
        if (opt.name.toLowerCase() === "size") {
          opt.values.forEach(value => {
            const option = document.createElement("option");
            option.value = value;
            option.textContent = value;
            sizeSelect.appendChild(option);
          });
        }
        if (opt.name.toLowerCase() === "color") {
          opt.values.forEach(value => {
            const option = document.createElement("option");
            option.value = value;
            option.textContent = value;
            colorSelect.appendChild(option);
          });
        }
      });

      // Show popup
      popup.classList.remove("hidden");
    } catch (err) {
      console.error(err);
    }
  });

  // Close popup
  popupClose.addEventListener("click", () => popup.classList.add("hidden"));
  popup.addEventListener("click", e => { if (e.target === popup) popup.classList.add("hidden"); });

  // Add to cart
  addToCartBtn.addEventListener("click", async () => {
    if (!currentProduct) return;
    const selectedSize = sizeSelect.value;
    const selectedColor = colorSelect.value;

    const matchedVariant = currentProduct.variants.find(v => 
      v.options.includes(selectedSize) && v.options.includes(selectedColor)
    );

    if (!matchedVariant) return alert("Please select valid options");

    try {
      await fetch("/cart/add.js", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id: matchedVariant.id, quantity: 1 })
      });
      alert("Product added to cart!");
      popup.classList.add("hidden");
    } catch (err) {
      console.error(err);
      alert("Could not add product to cart.");
    }
  });

  function formatMoney(cents) {
    return (cents / 100).toLocaleString("en-US", { style: "currency", currency: "USD" });
  }
});
