// custom-grid.js
function initCustomGrid() {
  const gridItems = document.querySelectorAll(".grid-item");
  const popup = document.getElementById("product-popup");
  const popupClose = document.getElementById("popup-close");
  const popupImage = document.getElementById("popup-image");
  const popupTitle = document.getElementById("popup-title");
  const popupPrice = document.getElementById("popup-price");
  const popupDescription = document.getElementById("popup-description");
  const sizeSelect = document.getElementById("size-select");
  const addToCartBtn = document.getElementById("add-to-cart");
  const colorOptionContainer = document.getElementById("color-option-container");
  const sizeOptionContainer = document.getElementById("size-option-container");
  const colorSwatchesContainer = document.getElementById("color-swatches");

  let currentProduct = null;
  let selectedColor = null;

  function formatMoney(cents) {
    return (cents / 100).toLocaleString("en-US", { style: "currency", currency: "USD" });
  }

  function findVariant(product, selectedOptions) {
    return product.variants.find(variant =>
      variant.options.every((opt, i) => selectedOptions[i] === opt)
    );
  }

  function updateCartCount() {
    fetch('/cart.js')
      .then(r => r.json())
      .then(cart => {
        document.querySelectorAll('.cart-count,[data-cart-count],#cart-count')
          .forEach(el => el.textContent = cart.item_count);
      });
  }

  function updatePrice() {
    if (!currentProduct) return;
    const selectedSize = sizeSelect.value;
    const selectedOptions = [];
    currentProduct.options.forEach(opt => {
      if (opt.name.toLowerCase() === "color") selectedOptions.push(selectedColor);
      else if (opt.name.toLowerCase() === "size") selectedOptions.push(selectedSize);
      else selectedOptions.push(opt.values[0]);
    });
    const variant = findVariant(currentProduct, selectedOptions);
    if (variant) popupPrice.textContent = formatMoney(parseFloat(variant.price) * 100);
  }

  async function showProductPopup(handle) {
    if (!handle) return;
    try {
      const res = await fetch(`/products/${handle}.js`);
      const data = await res.json();
      currentProduct = data;

      popupImage.src = data.images?.[0] || "{{ 'placeholder.png' | asset_url }}";
      popupTitle.textContent = data.title;
      popupPrice.textContent = formatMoney(parseFloat(data.variants[0].price) * 100);
      popupDescription.innerHTML = data.description || "";

      sizeSelect.innerHTML = "";
      colorSwatchesContainer.innerHTML = "";
      colorOptionContainer.style.display = 'none';
      sizeOptionContainer.style.display = 'none';

      if (data.options) {
        data.options.forEach(opt => {
          if (opt.name.toLowerCase() === "size") {
            sizeOptionContainer.style.display = 'block';
            opt.values.forEach(v => {
              const o = document.createElement("option");
              o.value = v; o.textContent = v;
              sizeSelect.appendChild(o);
            });
          } else if (opt.name.toLowerCase() === "color") {
            colorOptionContainer.style.display = 'block';
            opt.values.forEach((val, idx) => {
              const colorOption = document.createElement("div");
              colorOption.classList.add("color-option");

              const swatch = document.createElement("div");
              swatch.classList.add("color-swatch");

              // Map simple colors
              const colorMap = {
                white:"#fff", black:"#000", navy:"#000080", gray:"#808080",
                red:"#FF0000", blue:"#0000FF", green:"#008000", yellow:"#FFFF00",
                purple:"#800080", pink:"#FFC0CB", orange:"#FFA500", brown:"#A52A2A",
                beige:"#F5F5DC", khaki:"#F0E68C", olive:"#808000"
              };
              swatch.style.background = colorMap[val.toLowerCase()] || "#ccc";

              const label = document.createElement("span");
              label.classList.add("color-name");
              label.textContent = val;

              colorOption.appendChild(swatch);
              colorOption.appendChild(label);

              if (idx === 0) {
                colorOption.classList.add("selected");
                selectedColor = val;
              }

              colorOption.addEventListener("click", () => {
                document.querySelectorAll(".color-option").forEach(opt => opt.classList.remove("selected"));
                colorOption.classList.add("selected");
                selectedColor = val;
                updatePrice();
              });

              colorSwatchesContainer.appendChild(colorOption);
            });
            updatePrice();
          }
        });
      }

      sizeSelect.addEventListener("change", updatePrice);
      popup.classList.remove("hidden");
      document.body.style.overflow = "hidden";
    } catch (err) {
      console.error(err);
    }
  }

  gridItems.forEach(item => {
    item.querySelector(".popup-icon")?.addEventListener("click", e => {
      e.stopPropagation();
      showProductPopup(item.dataset.handle);
    });
  });

  popupClose.addEventListener("click", () => {
    popup.classList.add("hidden");
    document.body.style.overflow = "";
  });

  popup.addEventListener("click", e => {
    if (e.target === popup) {
      popup.classList.add("hidden");
      document.body.style.overflow = "";
    }
  });

  addToCartBtn.addEventListener("click", async () => {
    if (!currentProduct) return;
    const selectedSize = sizeSelect.value;
    const selectedOptions = [];
    currentProduct.options.forEach(opt => {
      if (opt.name.toLowerCase() === "color") selectedOptions.push(selectedColor);
      else if (opt.name.toLowerCase() === "size") selectedOptions.push(selectedSize);
      else selectedOptions.push(opt.values[0]);
    });
    const variant = findVariant(currentProduct, selectedOptions);
    if (!variant) return alert("Please select valid options");

    try {
      addToCartBtn.disabled = true;
      addToCartBtn.querySelector("span").textContent = "Adding...";

      const r = await fetch("/cart/add.js", {
        method:"POST",
        headers:{"Content-Type":"application/json","X-Requested-With":"XMLHttpRequest"},
        body:JSON.stringify({ id: variant.id, quantity:1 })
      });
      if (r.ok) {
        updateCartCount();
        alert("Product added to cart!");
        popup.classList.add("hidden");
        document.body.style.overflow = "";
      }
    } finally {
      addToCartBtn.disabled = false;
      addToCartBtn.querySelector("span").textContent = "ADD TO CART âžœ";
    }
  });
}

document.readyState === "loading"
  ? document.addEventListener("DOMContentLoaded", initCustomGrid)
  : initCustomGrid();

if (typeof Shopify !== "undefined") {
  document.addEventListener("shopify:section:load", initCustomGrid);
}
