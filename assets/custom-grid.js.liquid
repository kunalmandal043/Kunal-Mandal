document.addEventListener("DOMContentLoaded", function() {
  const gridItems = document.querySelectorAll(".grid-item");
  const popup = document.getElementById("product-popup");
  const popupClose = document.getElementById("popup-close");
  const popupImage = document.getElementById("popup-image");
  const popupTitle = document.getElementById("popup-title");
  const popupPrice = document.getElementById("popup-price");
  const popupDescription = document.getElementById("popup-description");
  const sizeSelect = document.getElementById("size-select");
  const colorSelect = document.getElementById("color-select");
  const addToCartBtn = document.getElementById("add-to-cart");

  let currentProduct = null;

  gridItems.forEach(item => {
    const popupIcon = item.querySelector(".popup-icon");
    if (!popupIcon) return;

    popupIcon.addEventListener("click", async (e) => {
      e.stopPropagation();
      const handle = item.dataset.handle;
      if (!handle) return console.error("Missing product handle");

      try {
        const response = await fetch(`/products/${handle}.js`);
        if (!response.ok) throw new Error(`Product fetch failed for ${handle}`);
        const data = await response.json();

        // Handle Shopify JSON variation
        const product = data.product || data;

        currentProduct = product;

        // Image
        popupImage.src = product.images && product.images.length > 0 
          ? product.images[0].src 
          : "{{ 'placeholder.png' | asset_url }}";

        // Title, Price, Description
        popupTitle.textContent = product.title;
        popupPrice.textContent = product.variants[0].price 
          ? formatMoney(product.variants[0].price * 100) 
          : "";
        popupDescription.innerHTML = product.body_html || "";

        // Options
        sizeSelect.innerHTML = "";
        colorSelect.innerHTML = "";
        product.options.forEach(opt => {
          if (opt.name.toLowerCase() === "size") {
            opt.values.forEach(val => {
              const option = document.createElement("option");
              option.value = val;
              option.textContent = val;
              sizeSelect.appendChild(option);
            });
          }
          if (opt.name.toLowerCase() === "color") {
            opt.values.forEach(val => {
              const option = document.createElement("option");
              option.value = val;
              option.textContent = val;
              colorSelect.appendChild(option);
            });
          }
        });

        popup.classList.remove("hidden");
      } catch (err) {
        console.error(err);
      }
    });
  });

  // Close popup
  popupClose.addEventListener("click", () => popup.classList.add("hidden"));
  popup.addEventListener("click", e => { if (e.target === popup) popup.classList.add("hidden"); });

  // Add to Cart
  addToCartBtn.addEventListener("click", async () => {
    if (!currentProduct) return;
    const selectedSize = sizeSelect.value;
    const selectedColor = colorSelect.value;

    const matchedVariant = currentProduct.variants.find(variant => 
      variant.options.includes(selectedSize) && variant.options.includes(selectedColor)
    );

    if (!matchedVariant) return alert("Please select valid options");

    try {
      await fetch("/cart/add.js", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id: matchedVariant.id, quantity: 1 })
      });
      alert("Product added to cart!");
      popup.classList.add("hidden");
    } catch (err) {
      console.error(err);
      alert("Could not add product to cart.");
    }
  });

  function formatMoney(cents) {
    return (cents / 100).toLocaleString("en-US", { style: "currency", currency: "USD" });
  }
});
