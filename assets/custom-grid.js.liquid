// custom-grid.js
document.addEventListener("DOMContentLoaded", () => {
  const gridItems = document.querySelectorAll(".grid-item");
  const popup = document.getElementById("product-popup");
  const popupClose = document.getElementById("popup-close");
  const popupImage = document.getElementById("popup-image");
  const popupTitle = document.getElementById("popup-title");
  const popupPrice = document.getElementById("popup-price");
  const popupDescription = document.getElementById("popup-description");
  const sizeSelect = document.getElementById("size-select");
  const colorSelect = document.getElementById("color-select");
  const addToCartBtn = document.getElementById("add-to-cart");

  let currentProduct = null;
  let currentVariant = null;

  // Event delegation for popup icons
  document.addEventListener("click", (e) => {
    const popupIcon = e.target.closest(".popup-icon");
    if (popupIcon) {
      const gridItem = popupIcon.closest(".grid-item");
      if (gridItem) {
        const handle = gridItem.dataset.handle;
        if (handle) {
          openProductPopup(handle);
        }
      }
    }
  });

  // Open product popup
  async function openProductPopup(handle) {
    try {
      // Show loading state
      popupTitle.textContent = "Loading...";
      popupPrice.textContent = "";
      popupDescription.innerHTML = "";
      sizeSelect.innerHTML = "";
      colorSelect.innerHTML = "";
      popup.classList.remove("hidden");

      // Fetch product data
      const res = await fetch(`/products/${handle}.js`);
      if (!res.ok) throw new Error("Product not found");
      
      const product = await res.json();
      currentProduct = product;

      // Set image
      if (product.images && product.images.length > 0) {
        popupImage.src = product.images[0];
        popupImage.alt = product.title;
      }

      // Set title, price, description
      popupTitle.textContent = product.title;
      popupPrice.textContent = formatMoney(product.price);
      popupDescription.innerHTML = product.description || "No description available";

      // Populate options
      populateOptions(product);

      // Set initial variant
      updateVariant();

    } catch (err) {
      console.error("Error loading product:", err);
      popupTitle.textContent = "Error loading product";
      popupDescription.innerHTML = "Please try again later.";
    }
  }

  // Populate option selects
  function populateOptions(product) {
    sizeSelect.innerHTML = "";
    colorSelect.innerHTML = "";

    product.options.forEach((option, index) => {
      if (option.name.toLowerCase() === "size") {
        option.values.forEach(value => {
          const optionEl = document.createElement("option");
          optionEl.value = value;
          optionEl.textContent = value;
          sizeSelect.appendChild(optionEl);
        });
        sizeSelect.addEventListener("change", updateVariant);
      }
      
      if (option.name.toLowerCase() === "color") {
        option.values.forEach(value => {
          const optionEl = document.createElement("option");
          optionEl.value = value;
          optionEl.textContent = value;
          colorSelect.appendChild(optionEl);
        });
        colorSelect.addEventListener("change", updateVariant);
      }
    });
  }

  // Update selected variant based on options
  function updateVariant() {
    if (!currentProduct) return;
    
    const selectedOptions = [
      sizeSelect.value,
      colorSelect.value
    ].filter(val => val); // Remove empty values

    // Find variant that matches selected options
    currentVariant = currentProduct.variants.find(variant => {
      return selectedOptions.every(option => variant.options.includes(option));
    });

    // Update price if variant found
    if (currentVariant) {
      popupPrice.textContent = formatMoney(currentVariant.price);
    }
  }

  // Add to cart
  addToCartBtn.addEventListener("click", async () => {
    if (!currentVariant) {
      alert("Please select options before adding to cart");
      return;
    }

    try {
      const res = await fetch("/cart/add.js", {
        method: "POST",
        headers: { 
          "Content-Type": "application/json",
          "X-Requested-With": "XMLHttpRequest"
        },
        body: JSON.stringify({
          items: [{
            id: currentVariant.id,
            quantity: 1
          }]
        })
      });

      if (res.ok) {
        alert("Product added to cart!");
        popup.classList.add("hidden");
      } else {
        throw new Error("Failed to add to cart");
      }
    } catch (err) {
      console.error("Error adding to cart:", err);
      alert("Could not add product to cart. Please try again.");
    }
  });

  // Close popup
  popupClose.addEventListener("click", () => {
    popup.classList.add("hidden");
  });

  popup.addEventListener("click", (e) => {
    if (e.target === popup) {
      popup.classList.add("hidden");
    }
  });

  // Format price
  function formatMoney(cents) {
    if (typeof cents === "string") {
      cents = parseFloat(cents.replace(".", ""));
    }
    return (cents / 100).toLocaleString("en-US", {
      style: "currency",
      currency: "USD"
    });
  }
});