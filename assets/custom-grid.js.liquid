const gridItems = document.querySelectorAll(".grid-item");
const popup = document.getElementById("product-popup");
const popupClose = document.getElementById("popup-close");
const popupImage = document.getElementById("popup-image");
const popupTitle = document.getElementById("popup-title");
const popupPrice = document.getElementById("popup-price");
const popupDescription = document.getElementById("popup-description");
const sizeSelect = document.getElementById("size-select");
const colorSelect = document.getElementById("color-select");
const addToCartBtn = document.getElementById("add-to-cart");

let currentProduct = null;

// ---------------------------
// Open popup when circle icon is clicked
// ---------------------------
gridItems.forEach(item => {
  const popupIcon = item.querySelector(".popup-icon");
  if (!popupIcon) return;

  popupIcon.addEventListener("click", async (e) => {
    e.stopPropagation(); // prevent bubbling to grid-item
    const handle = item.dataset.handle;
    if (!handle) return console.error("Missing product handle");

    try {
      const response = await fetch(`/products/${handle}.js`);
      if (!response.ok) throw new Error(`Failed to fetch product JSON for ${handle}`);
      const product = await response.json();
      currentProduct = product;

      // Fill popup content
      popupImage.src = (product.images.length > 0)
        ? product.images[0].src
        : "{{ 'placeholder.png' | asset_url }}";

      popupTitle.textContent = product.title;
      popupPrice.textContent = formatMoney(product.variants[0].price);
      popupDescription.innerHTML = product.body_html;

      // Populate options
      populateOptions(product);

      // Show popup
      popup.classList.remove("hidden");

    } catch (err) {
      console.error(err);
      alert("Failed to load product details.");
    }
  });
});

// ---------------------------
// Close popup
// ---------------------------
popupClose.addEventListener("click", () => popup.classList.add("hidden"));
popup.addEventListener("click", e => { if (e.target === popup) popup.classList.add("hidden"); });

// ---------------------------
// Add to Cart
// ---------------------------
addToCartBtn.addEventListener("click", async () => {
  if (!currentProduct) return;

  const selectedSize = sizeSelect.value;
  const selectedColor = colorSelect.value;

  // Find the variant matching the selected size & color
  const matchedVariant = currentProduct.variants.find(variant => 
    variant.option1 === selectedSize && variant.option2 === selectedColor
  );

  if (!matchedVariant) {
    return alert("Please select a valid size and color option.");
  }

  try {
    await fetch("/cart/add.js", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ id: matchedVariant.id, quantity: 1 })
    });

    alert("Product added to cart!");
    popup.classList.add("hidden");

  } catch (err) {
    console.error(err);
    alert("Failed to add product to cart.");
  }
});

// ---------------------------
// Populate size & color selects
// ---------------------------
function populateOptions(product) {
  sizeSelect.innerHTML = "";
  colorSelect.innerHTML = "";

  const sizeOption = product.options.find(opt => opt.name.toLowerCase() === "size");
  const colorOption = product.options.find(opt => opt.name.toLowerCase() === "color");

  if (sizeOption) {
    sizeOption.values.forEach(size => {
      const opt = document.createElement("option");
      opt.value = size;
      opt.textContent = size;
      sizeSelect.appendChild(opt);
    });
  }

  if (colorOption) {
    colorOption.values.forEach(color => {
      const opt = document.createElement("option");
      opt.value = color;
      opt.textContent = color;
      colorSelect.appendChild(opt);
    });
  }
}

// ---------------------------
// Format price from string
// ---------------------------
function formatMoney(priceStr) {
  const amount = parseFloat(priceStr);
  return amount.toLocaleString("en-US", { style: "currency", currency: "USD" });
}
