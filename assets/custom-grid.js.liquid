function initCustomGrid() {
  const els = {
    gridItems: document.querySelectorAll(".grid-item"),
    popup: document.getElementById("product-popup"),
    popupClose: document.getElementById("popup-close"),
    popupImage: document.getElementById("popup-image"),
    popupTitle: document.getElementById("popup-title"),
    popupPrice: document.getElementById("popup-price"),
    popupDescription: document.getElementById("popup-description"),
    addToCartBtn: document.getElementById("add-to-cart"),
    colorOptionContainer: document.getElementById("color-option-container"),
    sizeOptionContainer: document.getElementById("size-option-container"),
    colorSwatchesContainer: document.getElementById("color-swatches"),
    hiddenColorSelect: document.getElementById("color-select"),
    sizeArrow: document.querySelector(".size-arrow"),
  };

  const placeholderSrc = els.popup?.dataset.placeholder || "";
  const lowerArrow = els.popup?.dataset.arrowLower;
  const upperArrow = els.popup?.dataset.arrowUpper;

  let currentProduct = null,
      selectedColor = null,
      selectedSize = null,
      currentDropdown = null;

  const formatMoney = (cents) =>
    (cents / 100).toLocaleString("en-US", { style: "currency", currency: "USD" });

  const getVariantOptionsArray = (v) =>
    !v ? [] : v.options?.length ? v.options : [v.option1, v.option2, v.option3].filter(Boolean);

  const findVariant = (product, selectedOptions) =>
    product?.variants?.find((v) => {
      const vOpts = getVariantOptionsArray(v);
      return vOpts.every((opt, i) => selectedOptions[i] === opt);
    }) || null;

  const preventBodyScroll = (state) =>
    document.body.classList.toggle("body-no-scroll", state);

  const cleanupDropdown = () => {
    currentDropdown = null;
  };

  const closePopup = () => {
    els.popup.classList.add("hidden");
    document.body.classList.remove("popup-open");
    preventBodyScroll(false);
    cleanupDropdown();
    // reset arrow to lower on popup close
    if (els.sizeArrow) els.sizeArrow.src = lowerArrow;
  };

  const updatePrice = () => {
    if (!currentProduct) return;
    const opts = currentProduct.options.map((o) => {
      const name = o.name.toLowerCase();
      if (name === "color") return selectedColor;
      if (name === "size") return selectedSize || o.values[0];
      return o.values?.[0] || null;
    });
    const v = findVariant(currentProduct, opts);
    if (v) els.popupPrice.textContent = formatMoney(+v.price * 100);
  };

  function createCustomDropdown(container, options, placeholder) {
    let dropdownContainer = container.querySelector(".custom-dropdown");

    if (!dropdownContainer) {
      dropdownContainer = document.createElement("div");
      dropdownContainer.className = "custom-dropdown";

      const button = Object.assign(document.createElement("button"), {
        className: "dropdown-button placeholder",
        textContent: placeholder,
      });

      const optionsContainer = document.createElement("div");
      optionsContainer.className = "dropdown-options";

      options.forEach((option) => {
        const optEl = document.createElement("div");
        optEl.className = "dropdown-option";
        optEl.textContent = option;
        optEl.dataset.value = option;

        optEl.addEventListener("click", () => {
          optionsContainer.querySelectorAll(".dropdown-option").forEach((o) => o.classList.remove("selected"));
          optEl.classList.add("selected");
          button.textContent = option;
          button.classList.remove("placeholder");
          selectedSize = option;
          optionsContainer.style.display = "none";
          els.sizeArrow.src = lowerArrow;
          preventBodyScroll(false);
          currentDropdown = null;
          updatePrice();
        });

        optionsContainer.appendChild(optEl);
      });

      button.addEventListener("click", (e) => {
        e.stopPropagation();
        const isVisible = optionsContainer.style.display === "block";
        if (currentDropdown && currentDropdown !== optionsContainer) {
          currentDropdown.style.display = "none";
        }
        if (!isVisible) {
          optionsContainer.style.display = "block";
          els.sizeArrow.src = upperArrow; // arrow points up
          preventBodyScroll(true);
          currentDropdown = optionsContainer;
          button.textContent = placeholder;
          button.classList.add("placeholder");
          optionsContainer.querySelectorAll(".dropdown-option").forEach((o) => o.classList.remove("selected"));
        } else {
          optionsContainer.style.display = "none";
          els.sizeArrow.src = lowerArrow; // arrow points down
          preventBodyScroll(false);
          currentDropdown = null;
        }
      });

      document.addEventListener("click", (e) => {
        if (!dropdownContainer.contains(e.target) && optionsContainer.style.display === "block") {
          optionsContainer.style.display = "none";
          els.sizeArrow.src = lowerArrow;
          preventBodyScroll(false);
          currentDropdown = null;
        }
      });

      dropdownContainer.append(button, optionsContainer);
      container.appendChild(dropdownContainer);
    } else {
      // Reset existing dropdown on popup reopen
      const button = dropdownContainer.querySelector(".dropdown-button");
      const optionsContainer = dropdownContainer.querySelector(".dropdown-options");
      button.textContent = placeholder;
      button.classList.add("placeholder");
      optionsContainer.style.display = "none";
      optionsContainer.querySelectorAll(".dropdown-option").forEach((o) => o.classList.remove("selected"));
      selectedSize = null;
      // reset arrow
      if (els.sizeArrow) els.sizeArrow.src = lowerArrow;
    }

    return dropdownContainer;
  }

  async function showProductPopup(handle) {
    if (!handle) return;
    try {
      const data = await (await fetch(`/products/${handle}.js`)).json();
      currentProduct = data;

      els.popupImage.src = data.images?.[0] || placeholderSrc;
      els.popupTitle.textContent = data.title || "";
      els.popupPrice.textContent = data.variants?.[0]
        ? formatMoney(+data.variants[0].price * 100)
        : "";
      els.popupDescription.innerHTML = data.description || "";

      els.hiddenColorSelect.innerHTML = "";
      els.colorSwatchesContainer.innerHTML = "";
      els.colorOptionContainer.style.display = "none";
      els.sizeOptionContainer.style.display = "none";
      selectedColor = selectedSize = null;
      cleanupDropdown();

      data.options?.forEach((option) => {
        const name = option.name.toLowerCase();
        if (name === "size") {
          els.sizeOptionContainer.style.display = "block";
          createCustomDropdown(
            els.sizeOptionContainer.querySelector(".size-select-wrapper"),
            option.values,
            "Choose your size"
          );
        } else if (name === "color") {
          els.colorOptionContainer.style.display = "block";
          option.values.forEach((val, i) => {
            const opt = Object.assign(document.createElement("option"), {
              value: val,
              textContent: val,
            });
            els.hiddenColorSelect.appendChild(opt);

            const colorOption = document.createElement("div");
            colorOption.className = "color-option";
            if (/^(white|#fff|#ffffff)$/i.test(val)) colorOption.classList.add("is-white");
            colorOption.style.setProperty("--color-bar", val);

            const label = document.createElement("span");
            label.className = "color-name";
            label.textContent = val;
            colorOption.appendChild(label);

            if (i === 0) {
              colorOption.classList.add("selected");
              selectedColor = val;
            }

            colorOption.addEventListener("click", () => {
              els.colorSwatchesContainer.querySelectorAll(".color-option").forEach((o) => {
                o.classList.remove("selected");
                o.setAttribute("aria-selected", "false");
              });
              colorOption.classList.add("selected");
              colorOption.setAttribute("aria-selected", "true");
              selectedColor = val;
              els.hiddenColorSelect.value = val;
              updatePrice();
            });

            els.colorSwatchesContainer.appendChild(colorOption);
          });
          updatePrice();
        }
      });

      els.popup.classList.remove("hidden");
      document.body.classList.add("popup-open");
      preventBodyScroll(true);

      // always reset arrow on popup open
      if (els.sizeArrow) els.sizeArrow.src = lowerArrow;
    } catch (err) {
      console.error("Error loading product:", err);
    }
  }

  // ---------- Events ----------
  els.gridItems.forEach((item) => {
    item.querySelector(".popup-icon")?.addEventListener("click", (e) => {
      e.stopPropagation();
      showProductPopup(item.dataset.handle);
    });
  });

  els.popupClose?.addEventListener("click", closePopup);
  els.popup?.addEventListener("click", (e) => e.target === els.popup && closePopup());
}

if (document.readyState === "loading") {
  document.addEventListener("DOMContentLoaded", initCustomGrid);
} else initCustomGrid();

if (typeof Shopify !== "undefined") {
  document.addEventListener("shopify:section:load", initCustomGrid);
}
