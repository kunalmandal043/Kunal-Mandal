const popup = document.getElementById("product-popup");
const popupClose = document.getElementById("popup-close");
const popupImage = document.getElementById("popup-image");
const popupTitle = document.getElementById("popup-title");
const popupPrice = document.getElementById("popup-price");
const popupDescription = document.getElementById("popup-description");

const variantColor = document.getElementById("variant-color");
const variantSize = document.getElementById("variant-size");
const addToCartBtn = document.getElementById("add-to-cart");

let currentProduct = null;
let variantMap = {}; // map { color: { size: variantId } }

const popupIcons = document.querySelectorAll(".popup-icon");

// Open popup when clicking the circle icon
popupIcons.forEach(icon => {
  icon.addEventListener("click", async (e) => {
    e.stopPropagation();
    const item = icon.closest(".grid-item");
    const handle = item.dataset.handle;

    try {
      const response = await fetch(`/products/${handle}.js`);
      const product = await response.json();
      currentProduct = product;

      // Fill popup
      popupImage.src = product.images[0] || "{{ 'placeholder.png' | asset_url }}";
      popupTitle.textContent = product.title;
      popupPrice.textContent = formatMoney(product.price);
      popupDescription.innerHTML = product.description || "";

      // Reset selectors
      variantColor.innerHTML = "";
      variantSize.innerHTML = "";
      variantMap = {};

      // Build variant map
      product.variants.forEach(variant => {
        const parts = variant.title.split(" / ");
        const color = parts[0] || "Default";
        const size = parts[1] || "One Size";

        if (!variantMap[color]) variantMap[color] = {};
        variantMap[color][size] = variant.id;
      });

      // Populate colors
      Object.keys(variantMap).forEach(color => {
        const option = document.createElement("option");
        option.value = color;
        option.textContent = color;
        variantColor.appendChild(option);
      });

      // Populate sizes for first color
      updateSizes(Object.keys(variantMap)[0]);

      popup.classList.remove("hidden");
    } catch (err) {
      console.error("Error loading product:", err);
    }
  });
});

// Update sizes when color changes
variantColor.addEventListener("change", () => {
  updateSizes(variantColor.value);
});

function updateSizes(color) {
  variantSize.innerHTML = "";
  if (!variantMap[color]) return;
  Object.keys(variantMap[color]).forEach(size => {
    const option = document.createElement("option");
    option.value = size;
    option.textContent = size;
    variantSize.appendChild(option);
  });
}

// Close popup
popupClose.addEventListener("click", () => {
  popup.classList.add("hidden");
});
popup.addEventListener("click", e => {
  if (e.target === popup) popup.classList.add("hidden");
});

// Add to Cart
addToCartBtn.addEventListener("click", async () => {
  if (!currentProduct) return;

  const color = variantColor.value;
  const size = variantSize.value;
  const variantId = variantMap[color]?.[size];

  if (!variantId) {
    alert("Please select a valid option.");
    return;
  }

  try {
    await fetch("/cart/add.js
