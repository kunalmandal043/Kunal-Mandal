document.addEventListener("DOMContentLoaded", function () {
  const popup = document.getElementById("product-popup");
  const popupClose = document.getElementById("popup-close");
  const popupImage = document.getElementById("popup-image");
  const popupTitle = document.getElementById("popup-title");
  const popupPrice = document.getElementById("popup-price");
  const popupDescription = document.getElementById("popup-description");
  const variantSelect = document.getElementById("variant-select");
  const addToCartBtn = document.getElementById("add-to-cart");

  let selectedProductId = null;
  let selectedVariantId = null;

  /**
   * Apply fallback images by matching product handles
   */
  window.applyFallbackImages = function () {
    const gridImages = document.querySelectorAll("img[data-fallback-handle]");

    if (!Array.isArray(window.fallbackImages)) {
      console.warn(" No fallback images loaded yet.");
      return;
    }

    // Build a handle -> imageSrc map
    const imageMap = {};
    window.fallbackImages.forEach(entry => {
      if (entry["Handle"] && entry["Image Src"]) {
        imageMap[entry["Handle"]] = entry["Image Src"];
      }
    });

    console.log(" Fallback image map ready:", imageMap);

    // Replace each grid image
    gridImages.forEach((img) => {
      const handle = img.dataset.fallbackHandle;
      if (imageMap[handle]) {
        console.log(" Setting image for", handle, "â†’", imageMap[handle]);
        img.src = imageMap[handle];
      } else {
        console.warn(" No match for handle:", handle);
      }
    });
  };

  /**
   * Open popup
   */
  document.querySelectorAll(".grid-item .popup-icon").forEach(icon => {
    icon.addEventListener("click", async (e) => {
      const gridItem = e.target.closest(".grid-item");
      selectedProductId = gridItem.dataset.productId;

      popupTitle.textContent = gridItem.dataset.productTitle;
      popupPrice.textContent = gridItem.dataset.productPrice;
      popupDescription.textContent = gridItem.dataset.productDescription;

      const productHandle = gridItem.dataset.productHandle;

      try {
        const res = await fetch(`/products/${productHandle}.js`);
        const productData = await res.json();

        if (productData.images && productData.images.length > 0) {
          popupImage.src = productData.images[0];
        } else {
          const match = window.fallbackImages.find(f => f["Handle"] === productHandle);
          if (match && match["Image Src"]) {
            popupImage.src = match["Image Src"];
          }
        }

        variantSelect.innerHTML = "";
        productData.variants.forEach(v => {
          const option = document.createElement("option");
          option.value = v.id;
          option.textContent = v.title;
          variantSelect.appendChild(option);
        });

        selectedVariantId = productData.variants[0]?.id || null;
      } catch (err) {
        console.error(" Error fetching product data:", err);
      }

      popup.classList.remove("hidden");
    });
  });

  popupClose.addEventListener("click", () => {
    popup.classList.add("hidden");
  });
  popup.addEventListener("click", (e) => {
    if (e.target === popup) popup.classList.add("hidden");
  });

  variantSelect.addEventListener("change", (e) => {
    selectedVariantId = e.target.value;
  });

  addToCartBtn.addEventListener("click", async () => {
    if (!selectedVariantId) return;

    try {
      await fetch("/cart/add.js", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          items: [{ id: selectedVariantId, quantity: 1 }]
        })
      });

      alert("Product added to cart!");
      popup.classList.add("hidden");
    } catch (err) {
      console.error(" Error adding to cart:", err);
      alert("Could not add product to cart.");
    }
  });

  /**
   * Fetch fallback-images.json after DOM is ready
   */
  fetch("{{ 'fallback-images.json' | asset_url }}")
    .then(res => res.json())
    .then(data => {
      console.log(" Loaded fallback JSON:", data);
      window.fallbackImages = data;
      window.applyFallbackImages();
    })
    .catch(err => console.error(" Could not load fallback images:", err));
});
